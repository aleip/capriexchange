********************************************************************************
$ontext

   CAPRI project

   GAMS file : prepare_market_data.GMS

   @purpose  :  Prepare data for market model:
                - Supply utilization accounts from FAO
                - Projection from AT2030 of FAO
                - Trade flows from FAO
                - Map COCO/CAPREG data in definition of market model
                - include population data
                - calculate growth rates

   @author   : W. Britz, T. Jansson et.al.
   @date     : 27.10.09
   @since    : Spring 2005
   @refDoc   :
   @seeAlso  : global.gms
   @calledBy : arm\market1.gms

$offtext
********************************************************************************
*$onlisting
*option profile = 1;
*option profiletol = 1;
* -- switch for an ad-hoc reporting part
$setglobal source_report OFF
Set justadummy /FIN,GrowthFac/;
* -------------------------------------------------------------------------------
* DECLARATIONS
* -------------------------------------------------------------------------------

   SET rowsToMap(ROWS) 'Products for which to take prices from a certain source at a certain point of the code';
   SET s_to_read_Aglink / index_per_yr /;
*
   ALIAS(DOMM,DOMM1);

* --- some sets to select and use a long run scenario for a baseline
*
   SET longScen "All long-run globiom (or other) scenarios"/
        SSP1                "Matching shared socioeconomic pathway #1 from IPCC assessment: ...",
        SSP2                "Matching shared socioeconomic pathway #2 from IPCC assessment: ...",
        SSP3                "Matching shared socioeconomic pathway #3 from IPCC assessment: ...",
        SSP4                "Matching shared socioeconomic pathway #4 from IPCC assessment: ...",
        SSP5                "Matching shared socioeconomic pathway #5 from IPCC assessment: ...",
        primes_bas_sep10    "Reference run for DG CLIMA based on PRIMES sep 2010",
        agmip_autumn2011    "Ag model intercomparison and improvement GLOBIOM baseline 2011",
        faoIfpri2009        "Merged FAO/IFPRI baseline 2009 (copy from p_F2050IMPACT)"
   /;

*  Selected scenario for this run:
$SETLOCAL SelecScen primes_bas_sep10
*
   SET macro(COLS) / GDP, INHA/;
   ALIAS(macro,macro1);
*
   SET info / factorB2000   "change factor relative to base year 2000"
   /;
*
*
$iftheni %SelecScen% == faoIfpri2009
  SET longYr "years with long run projections" /20%BAS%, 2020, 2030, 2050 /;
$else
  SET longYr "years with long run projections" /20%BAS%, 2010, 2020, 2030, 2040, 2050 /;
$endif
*
*
*
  parameter
  p_longRunInfoAll(RMALL,cols,rows,info,longScen,*)     'All available longrun projection results'
  p_longrunInfo(RMall,cols,rows,info,*)   'Selected longrun projection results'
  ;



* --- sets that are only defined to enable reading the results gdx's
*     the idea is to make these items available in the universal set [data parameters below are defined over *]
*
   set ToRead_fao_agg "get some positions calculated in global into the universal set" /grate,grateAglink2020/;
   set S_NETT         "Get FAPRI column NETT into the universal set" / NETT/;

   PARAMETER
            p_dataMarket(*,*,*,*)   "SUA data from FAO"
            p_fapriData(*,*,*,*)
            p_aglinkGrowthFactor(*,*,*,*) "growth factors from baseyear from AGLINK"
            p_bioDat(*,*,*,*)   "international biofuel data from Aglink and other sources"
            p_ElasSuppOri(*,*,*)      "Aggregated supply elasticities from FAO World Food model"
            p_ElasDemOri(*,*,*)       "Aggregated supply elasticities from FAO World Food model"
            p_demElasLitUpd(RMS,*,*)
            p_mediumTermData(*,*,*,*,*)
            p_ElasFeedOri(*,*,*)      "Aggregated supply elasticities from FAO World Food model";


$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' define

*
* --- data for countries/country aggregates from FAO, if above 500 tons
*
  SET suaCols(COLS) "The SUA columns to take over" / MAPR,GROF,FEDM,HCOM,INDM,IMPT,EXPT,LOSM,SEDM,GDP,PRCM,LEVL,YILD /;
  ALIAS(suaCols,suaCols1);




* --- dynamic regional set to be re-defined below
  SET RMT(RMALL);

* --- dynamic set for years (to be re-defined several times below)
  SET AYEARS(SIMYY);


*
* -------------------------------------------------------------------------------
*
*      Data input from different sources (FAPRI, IMPACT, FAO/SUA, ...)
*
* -------------------------------------------------------------------------------


* ### block FAPRI sources
$batinclude 'util\title.gms' "' FAPRI block in data_prep'"

*
*  --- include data from FAPRI (generated by convertFapri.gms, included by global.gms)
*
$IF NOT EXIST "%results_in%\global\fapri_data.gdx" $ABORT "%results_in%\global\fapri_data.gdx is missing, in %system.fn%, line %system.incline%"
  execute_load "%results_in%\global\fapri_data.gdx",p_fapriData;
*
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceFapriDataPrep 1init p_fapriData
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 1init DATA

  option p_fapriData:2:3:1;
  RMT(RMALL)  = YES;

*
*   --- Assign net trade from FAPRI to imports or exports (as in AT2030 projections)
*
   p_fapriData(RMT,"IMPT",ROWS,SIMYY) =  MAX(0., -p_fapriData(RMT,"NTRD",ROWS,SIMYY));
   p_fapriData(RMT,"EXPT",ROWS,SIMYY) =  MAX(0.,  p_fapriData(RMT,"NTRD",ROWS,SIMYY));
*
*   --- FAPRI def apparently includes beer into HCOM:

   p_fapriData(RMT,"HCOM","BARL",SIMYY) =  0.;
*
*   --- FAPRI data for raw milk are not needed as dairy products are directly supplied according to behavioural functions
*pw/mk  251111 After introduction of raw milk in non EU regions deletion is not useful anymore
*   p_fapriData(RMT,DOMM,"MILK",SIMYY) =  0.;
*
*   --- Disaggregate domestic use according to EU15 shares
*       NOTE1: EU15 is written to p_fapriData to avoid frequnet reaggregation but EU15 is a nonexisting region code

   p_fapriData("EU15",DOMM,ROWS,"BAS")     = SUM(MAP_RR("EU015000",RMSSUP), DATA(RMSSUP,DOMM,ROWS,"BAS"));
   p_fapriData("EU15","DOMM",ROWS,"BAS")   = SUM(MAP_RR("EU015000",RMSSUP), DATA(RMSSUP,"DOMM",ROWS,"BAS"));
*
*  --- aggregate WHEA (as used in market model) from soft and durum
*
   p_fapriData("EU15",DOMM,"WHEA","BAS")   = p_fapriData("EU15",DOMM,"SWHE","BAS")   + p_fapriData("EU15",DOMM,"DWHE","BAS") ;
   p_fapriData("EU15","DOMM","WHEA","BAS") = p_fapriData("EU15","DOMM","SWHE","BAS") + p_fapriData("EU15","DOMM","DWHE","BAS") ;
*
*
*  --- EU15 shares are applied to all countries (also non EU27) lacking information on domestic use components
*
   p_fapriData(RMT,DOMM,ROWS,SIMYY) $ (     (NOT p_fapriData(RMT,DOMM,ROWS,SIMYY) )
                                        AND p_fapriData(RMT,"DOMM",ROWS,SIMYY)
                                        AND (NOT SAMEAS(DOMM,"STCM"))
                                        AND MAX(0.,p_fapriData("EU15","DOMM",ROWS,"BAS")
                                                  -SUM(DOMM1 $ p_fapriData(RMT,DOMM1,ROWS,SIMYY),p_fapriData("EU15",DOMM1,ROWS,"BAS"))))

              =  MAX(0.,p_fapriData(RMT,"DOMM",ROWS,SIMYY)   -  SUM(DOMM1, p_fapriData(RMT,DOMM1,ROWS,SIMYY)))
                          *p_fapriData("EU15",DOMM,ROWS,"BAS")
                /MAX(0.,p_fapriData("EU15","DOMM",ROWS,"BAS")- SUM(DOMM1 $ p_fapriData(RMT,DOMM1,ROWS,SIMYY),
                                                                           p_fapriData("EU15",DOMM1,ROWS,"BAS")));
*
*   --- Linear  extrapolation to Y, eg 2020, based on FAPRI change between last FAPRI year and 5 years earlier
*       NOTE1: As the short run FAPRI dynamics usually have worked out after a few years this is probably better
*              than extrapolating based on the full change from BAS which might reflect short run dynamics.

*mih Last year with FAPRI projection is defined dinamycally based on the content of fapri_data.gdx
set LstFAPRI(simyy)     "Last year with fapri projection data";
set Lst_5FAPRI(simyy)   "5 years before the last year with fapri projection data -- for calculating the last 5 year average";

alias(simyy,simyy_alias);

LstFAPRI(simyy)   $ (simyy.ord eq smax((simyy_alias,ROWS,RMT) $ p_fapriData(RMT,"GROF",ROWS,simyy_alias), simyy_alias.ord))  = yes;
Lst_5FAPRI(simyy) $ (simyy.ord eq (smax(simyy_alias $ LstFAPRI(simyy_alias), simyy_alias.ord) - 5)) = yes;


   IF((CALYEA("Y") LE sum(simyy $ LstFAPRI(simyy), simyy.val)) ,

*     --- take over data from FAPRI projection for current simulation year
*
      p_fapriData(RMT,suaCols,ROWS,"Y")    =  p_fapriData(RMT,suaCols,ROWS,"%SIMY%");

   ELSE
*
      IF( (sum(simyy $ LstFAPRI(simyy), simyy.val) LE 2020) ,
*
*        --- linear extension of fapri forecast
*            summation over LstFAPRI and Lst_5FAPRI is only a GAMS trick (those sets have only 1 element each)
*
         p_fapriData(RMT,suaCols,ROWS,"Y")
           =    sum( (LstFAPRI,Lst_5FAPRI),
                p_fapriData(RMT,suaCols,ROWS,LstFAPRI)
             + (p_fapriData(RMT,suaCols,ROWS,LstFAPRI) - p_fapriData(RMT,suaCols,ROWS,Lst_5FAPRI))
              / (sum(simyy $ LstFAPRI(simyy), simyy.val) - sum(simyy $ Lst_5FAPRI(simyy), simyy.val))
              * (CALYEA("Y") - sum(simyy $ LstFAPRI(simyy), simyy.val) ));

      ELSE
*
*        --- beyond 2020 we have long run expert sources, but we will shift smoothly from the medium run horizon up to 2020
*            to the long run up to 2050. For this purpose we need the medium run projections up to 2020.

          p_fapriData(RMT,suaCols,ROWS,"Y")
              =  sum( (LstFAPRI,Lst_5FAPRI),
                 p_fapriData(RMT,suaCols,ROWS,LstFAPRI)
               + (p_fapriData(RMT,suaCols,ROWS,LstFAPRI) - p_fapriData(RMT,suaCols,ROWS,Lst_5FAPRI))
                / (sum(simyy $ LstFAPRI(simyy), simyy.val) - sum(simyy $ Lst_5FAPRI(simyy), simyy.val))
                * (CALYEA("2020") -  sum(simyy $ LstFAPRI(simyy), simyy.val) ));
      );

*     --- security device avoiding negative and extremely high extrapolations

      p_fapriData(RMT,suaCols,ROWS,"Y") $ ( sum(LstFAPRI, p_fapriData(RMT,suaCols,ROWS,LstFAPRI)) GE 0)
         =  sum( LstFAPRI,      MIN(MAX(      p_fapriData(RMT,suaCols,ROWS,"Y"),
                                        0.2 * p_fapriData(RMT,suaCols,ROWS,LstFAPRI)),
                                        5.0 * p_fapriData(RMT,suaCols,ROWS,LstFAPRI)));
   );

*
* --- checking negative extrapolated values (should be avoided...)
   PARAMETER p_check  "checking parameter in data_prep";

   p_check(RMT,ROWS,suaCols) $ (p_fapriData(RMT,suaCols,ROWS,"Y") lt 0) = p_fapriData(RMT,suaCols,ROWS,"Y");
   if ( card(p_check) ne 0,
       display p_check;
       abort "Negative simulation year data from fapri for FAO_Y in %system.fn%, %system.incline%";
   );




* ### block FAO sources
$batinclude 'util\title.gms' "' FAO block in data_prep'"
$batinclude 'util\title.gms' "' Data input from FAO'"
*
*  --- include data from FAO (generated by global.gms)
*

$batinclude "util\debug_stepbystep.gms" Start Data 4

*
$IF NOT EXIST "%results_in%\global\fao_agg_%BAS%.gdx" $ABORT "%results_in%\global\fao_agg_%BAS%.gdx" is missing, in %system.fn%, line %system.incline%
  execute_load "%results_in%\global\fao_agg_%BAS%.gdx",p_dataMarket,
                                                       p_tradeflows,
                                                       p_mediumTermData,
                                                       p_elasSuppOri=p_supplyElas,
                                                       p_elasDemOri=p_demandElas,
                                                       p_elasFeedOri=p_feedElas,
                                                       p_bioDat=p_biofuelData;
  RMT("CH") = NO;
*
* --- the trade matrix contains more countries and commodities than those actually used in the market model
*     => delete what is not used
*
  p_tradeFlows(RMALL,RMALL1,XX,SIMYY) $ ((NOT RM(RMALL)) or (NOT RM(RMALL1))) = 0;
  p_tradeFlows(RMALL,RMALL1,ROWS,SIMYY) $ (NOT XX_ALL(ROWS)) = 0;


$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceTradeflowsPrep 1init p_tradeFlows
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataMarketPrep 1init p_dataMarket
*
*   --- Same for FAO as we did for FAPRI above: Linear extrapolation to Y (<2020) based on FAO change between BAS and 2020
*       NOTE: For the long run beyond 2020 we use the long run expert sources FAO/IFPRI below
*
   IF(CALYEA("Y") LT CALYEA("2020"),
*
*     NOTE: The "FAO projections" are from the old AT2030 activity whereas BAS was from the FAO ex post data
*           => We often have p_dataMarket(RMT,suaCols,ROWS,"2020") = 0 but p_dataMarket(RMT,suaCols,ROWS,"BAS") > 0
*           => Need to check that both are given, otherwise we create artificial downward trends by interpolation
      p_dataMarket(RMT,suaCols,ROWS,"Y")  $ (     p_dataMarket(RMT,suaCols,ROWS,"2020")
                                             and  p_dataMarket(RMT,suaCols,ROWS,"BAS"))
        =  p_dataMarket(RMT,suaCols,ROWS,"BAS")
         + (p_dataMarket(RMT,suaCols,ROWS,"2020") - p_dataMarket(RMT,suaCols,ROWS,"BAS"))
           / (CALYEA("2020") - CALYEA("BAS") )
           * (CALYEA("Y") - CALYEA("BAS") );

*     ---  security device avoiding negative and extremely high extrapolations

      p_dataMarket(RMT,suaCols,ROWS,"Y") $ (p_dataMarket(RMT,suaCols,ROWS,"2020") GT 0.)
        = MIN(MAX(      p_dataMarket(RMT,suaCols,ROWS,"Y"),
                  0.2 * p_dataMarket(RMT,suaCols,ROWS,"2020") ),
                  5.0 * p_dataMarket(RMT,suaCols,ROWS,"2020"));
   ELSE
*
*     --- take over data for 2020
*
      p_dataMarket(RMT,suaCols,ROWS,"Y")    =  p_dataMarket(RMT,suaCols,ROWS,"2020")
*
   );



*   --- include projected data for all regions from FAO/AT2030 up to 2020
*       (excluding the ones covered by COCO/CAPREG and excluding MILK which is only implicit in non EU)
*pw/mk  (251111 After introduction of raw milk in non EU regions exclusion is not useful anymore)
*
   DATA(RMT,suaCols,ROWS,"FAO_Y")   $ ((p_dataMarket(RMT,suaCols,ROWS,"Y") GT 500)
*                                        don t mix with FAPRI projections
                                         and (NOT SUM(suaCols1 $ DATA(RMT,suaCols1,ROWS,"FAO_Y"),1.))
                                         and ( (NOT SUM(SAMEAS(RMSSUP,RMT),1))))
      = p_dataMarket(RMT,suaCols,ROWS,"Y")/1000.;

   option kill=p_check;
   p_check(RMS,XX,suaCols) $ (DATA(RMS,suaCols,XX,"FAO_Y") lt 0) = DATA(RMS,suaCols,XX,"FAO_Y");
   if ( card(p_check) ne 0,
        display p_check;
        abort "Negative year data from FAO for FAO_Y in %system.fn%, %system.incline%";
   );




* --------------------------------------------------------------------------------------------------
*
*      ASSIGN p_dataMarket to DATA; for the base year 'BAS'
*
* --------------------------------------------------------------------------------------------------
*

   option kill=p_check;
   p_check(RMS,XX,suaCols) $ (DATA(RMS,suaCols,XX,"BAS") lt 0) = DATA(RMS,suaCols,XX,"BAS");
   if ( card(p_check) ne 0,
        display p_check;
        abort "Negative base year data from FAPRI in %system.fn%, %system.incline%";
   );
*
*   --- include base year data for NON-EU regions from FAO if not already set
*       (exclude regions covered by COCO/CAPREG, with the exemption of products not covered by COCO)
*
   SET nonCocoRows(ROWS) / COCO,COFF,TEAS,FFIS,SFIS,OTHO,OAQU /;
*
  option kill=AYEARS;
* --- 3-year time interval around the base year, i.e. 'BAS'
  AYEARS(SIMYY) $ ( (CALYEA(SIMYY) GE (CALYEA("BAS")-1)) and ((CALYEA(SIMYY) LE CALYEA("BAS")+1))) = YES;
*
   DATA(RMT,suaCols,ROWS,"BAS") $ (  ((NOT SUM(SAMEAS(RMSSUP,RMT),1)) or nonCocoRows(ROWS))
*                                     don t mix with AT2030 projections
*                                      and (NOT SUM(suaCols1 $ DATA(RMT,suaCols1,ROWS,"BAS"),1.))
                                      and (   (SUM(AYEARS,p_dataMarket(RMT,suaCols,ROWS,AYEARS)) GT 1500)
                                           or SAMEAS(suaCols,"LEVL"))
                                    )
     = SUM(AYEARS,p_dataMarket(RMT,suaCols,ROWS,AYEARS))/3000.;

   DATA(RMT,"YILD",ROWS,"BAS") $ (    ((NOT SUM(SAMEAS(RMSSUP,RMT),1)) or nonCocoRows(ROWS))
                                  and DATA(RMT,"LEVL",ROWS,"BAS"))

      =  DATA(RMT,"MAPR",ROWS,"BAS")/DATA(RMT,"LEVL",ROWS,"BAS");



   option kill=p_check;
   p_check(RMS,XX,suaCols) $ (DATA(RMS,suaCols,XX,"BAS") lt 0) = DATA(RMS,suaCols,XX,"BAS");
   if ( card(p_check) ne 0,
        display p_check;
       abort "Negative base year data from FAO in %system.fn%, %system.incline%";
   );



* --- fao block ends up here...
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceTradeflowsPrep 3fao p_tradeFlows
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataMarketPrep 3fao p_dataMarket
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 3fao DATA


*
*  --- load corrected data for Switzerland
*
$include '..\dat\arm\bas_data_ch.gms'
DATA("CH",cols,"PLMO","BAS") = 0;
*
*  --- load data for Taiwan
*


$include '..\dat\arm\bas_data_taw.gms'
*



  SET maxUsePose(*,*,*);
*
*
* --- in case production is given, find out the biggest market position
*
  maxUsePose(RMT,usePose1,ROWS) $ ( (SMAX( usePose, SUM(AYEARS,p_dataMarket(RMT,usePose,ROWS,AYEARS)))
                                       EQ SUM(AYEARS,p_dataMarket(RMT,usePose1,ROWS,AYEARS)))
                                          and DATA(RMT,"GROF",ROWS,"BAS")) = YES;
*
* --- in case all market positions are zero, but production is given, store the biggest one,
*     even if below 500 tons, but at least 200 tons
*

  DATA(RMT,usePose,ROWS,"BAS") $ (  ((NOT SUM(SAMEAS(RMSSUP,RMT),1)) or nonCocoRows(ROWS))
* temporary solution to avoid INDM being taken from FAO for RAPO for CH
                                  and (NOT SAMEAS ("CH",RMT))
                                  and (NOT DATA(RMT,usePose,ROWS,"BAS"))
                                  and maxUsePose(RMT,usePose,ROWS)
                                  and ((SUM(AYEARS,p_dataMarket(RMT,usePose,ROWS,AYEARS)) GT 600)))
     = SUM(AYEARS,p_dataMarket(RMT,usePose,ROWS,AYEARS))/3000.;


   p_check(RMS,XX,suaCols) $ (DATA(RMS,suaCols,XX,"BAS") lt 0) = DATA(RMS,suaCols,XX,"BAS");
   display p_check;
   if ( card(p_check) ne 0, abort "Negative base year data from FAPRI in %system.fn%, %system.incline%");
   option kill=maxUsePose;
*
* --- in case produciton is missing, but market positions exceed 500 tons,
*     Store productioin if above 200 tons (but below 500 tons)
*
  DATA(RMT,"GROF",ROWS,"BAS") $ (   ((NOT SUM(SAMEAS(RMSSUP,RMT),1)) or nonCocoRows(Rows))
                                      and SUM(usePose, DATA(RMT,usePose,ROWS,"BAS"))
                                      and (NOT SAMEAS ("CH",RMT))
                                      and (NOT DATA(RMT,"GROF",ROWS,"BAS"))
                                      and ((SUM(AYEARS,p_dataMarket(RMT,"GROF",ROWS,AYEARS)) GT 600)))
    = SUM(AYEARS,p_dataMarket(RMT,"GROF",ROWS,AYEARS))/3000.;


  RMT(RMSSUP) = NO;
*
* --- Take over fat on protein contents of milk products
*
   DATA(RMT,FatsProt,MLKPRO,"BAS") = SUM(AYEARS,p_dataMarket(RMT,FatsProt,MLKPRO,AYEARS))/3 ;

Execute_unload "%scrdir%\test1.gdx";
* ### block biofuel balances [BAS and other yrs]
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceBioDataPrep 1init P_bioDat
*
*   --- the remaining statement are only valid for regions not covered by COCO/CAPREG
*


*
*  ---   Biofuel data: Use data block generated in global.gms  and stored on P_bioDat

*  --- three year average around base years for bio-fuel data

  DATA(RMT,Cols,ROWS,"BAS") $ SUM(AYEARS, p_bioDat(RMT,COLS,ROWS,AYEARS))
  = SUM(AYEARS, p_bioDat(RMT,COLS,ROWS,AYEARS)) / SUM(AYEARS, 1)   ;

$iftheni %BIOF%==bf2
  DATA(RMT,Cols,ROWS,"BAS") $ SUM(AYEARS, p_bioDat(RMT,COLS,ROWS,AYEARS))
  = SUM(AYEARS, p_bioDat(RMT,COLS,ROWS,AYEARS)) / SUM(AYEARS $ (p_bioDat(RMT,COLS,ROWS,AYEARS)), 1)   ;

*      biofuel prices only exist for EU27 => assume same prices for EU aggs
  DATA(EU27AGGS,"PMRK",seco_biof,"BAS") = DATA("EU027000","PMRK",seco_biof,"BAS");
  DATA(EU27AGGS,"CPRI",seco_biof,"BAS") = DATA("EU027000","CPRI",seco_biof,"BAS");

$endif

* --- for simulation year (actually only til 2020 availabe - fill up first)
*
*     WB: explanation for 1.2 / 0.3 missing: does it make sense for longer
*         horizons to use these bounds?
*
  p_bioDat(RMT,COLS,ROWS,"%SIMY%") $ (CALYEA("Y") GT CALYEA("2020"))

  =  MIN(p_bioDat(RMT,COLS,ROWS,"2020")*1.2,
     MAX(p_bioDat(RMT,COLS,ROWS,"2020")*0.3,p_bioDat(RMT,COLS,ROWS,"2015")
                                   + (p_bioDat(RMT,COLS,ROWS,"2020") - p_bioDat(RMT,COLS,ROWS,"2015"))
                                   / (CALYEA("2020") - CALYEA("2015") )
                                   * (CALYEA("Y") - CALYEA("2015") )))  ;

  DATA(RMT,Cols,ROWS,"AGL_Y") = p_bioDat(RMT,COLS,ROWS,"%SIMY%")  ;

$iftheni %BIOF%==bf2
*      biofuel prices only exist for EU27 => assume same prices for EU aggs
  DATA(EU27AGGS,"PMRK",seco_biof,"AGL_Y") = DATA("EU027000","PMRK",seco_biof,"AGL_Y");
  DATA(EU27AGGS,"CPRI",seco_biof,"AGL_Y") = DATA("EU027000","CPRI",seco_biof,"AGL_Y");
$endif

*### --- end of biofuel balances block
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceBioDataPrep 4bio  P_bioDat
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 4bio DATA


Execute_unload "%scrdir%\test2.gdx";

* ### block close balances and macro initialization [for BAS]
*
*   --- include total consumer expenditure for base year for all regions
*       (from UNSTATS via global.gms for non COCO regions)
*
*       NOTE: INCE.LEVL = 0 usually at this point for all regions
*             => simple assignment rather than MAX(.) security device
*                from data_cal to ensure income higher than expenditure
*             But scaling of Ince.LEVL should be such that Ince.LEVL = sum(xx,HCOM(xx)*UVAD(xx)) =>
*
*
* --- EXPD = final household expenditure
*     GDP  = final household expenditure + final gov expenditure + gross capital formation + current account balance
*
*     Analysis of the underlying UN-stats shows that EXPD/GDP can vary quite substantially ...
*
  DATA(RMT,"EXPD","LEVL","BAS")  = p_dataMarket(RMT,"EXPD","LEVL","BAS");
  DATA(RMS,"GDP","LEVL","BAS")   = p_dataMarket(RMS,"GDP","LEVL","BAS");
*
  DATA(RMS,"Ince","Levl","BAS")  = 1000.*MAX(DATA(RMS,"EXPD","LEVL","BAS"),p_dataMarket(RMS,"GDP","LEVL","BAS"));

*
*   --- some items are calculated residually so that they close the balance
*
  RMT("CH") = NO;

  DATA(RMT,"PRCM",SED,"BAS") $ (NOT DATA(RMT,"PRCM",SED,"BAS"))
   = MAX(0, DATA(RMT,"MAPR",SED,"BAS")+DATA(RMT,"IMPT",SED,"BAS")-DATA(RMT,"EXPT",SED,"BAS")
                                     -DATA(RMT,"FEDM",SED,"BAS")-DATA(RMT,"SEDM",SED,"BAS")-DATA(RMT,"LOSM",SED,"BAS")
                                     -DATA(RMT,"HCOM",SED,"BAS"));
*
  DATA(RMT,"PRCM","TEXT","BAS") $ (NOT DATA(RMT,"PRCM","TEXT","BAS") )
                                = MAX(0, DATA(RMT,"GROF","TEXT","BAS")+DATA(RMT,"IMPT","TEXT","BAS")-DATA(RMT,"EXPT","TEXT","BAS")
                                     -DATA(RMT,"FEDM","TEXT","BAS")-DATA(RMT,"SEDM","TEXT","BAS")-DATA(RMT,"LOSM","TEXT","BAS")
                                     -DATA(RMT,"HCOM","TEXT","BAS"));

  DATA(RMT,"HCOM","TOBA","BAS") $ (NOT DATA(RMT,"HCOM","TOBA","BAS") )
                                = MAX(0, DATA(RMT,"GROF","TOBA","BAS")+DATA(RMT,"IMPT","TOBA","BAS")-DATA(RMT,"EXPT","TOBA","BAS")
                                        -DATA(RMT,"FEDM","TOBA","BAS")-DATA(RMT,"SEDM","TOBA","BAS")-DATA(RMT,"LOSM","TOBA","BAS")
                                        -DATA(RMT,"PRCM","TOBA","BAS"));
*
  DATA(RMT,"GROF","SUGA","BAS") $ (NOT DATA(RMT,"GROF","SUGA","BAS") )
                                = MAX(0,                           -DATA(RMT,"IMPT","SUGA","BAS")+DATA(RMT,"EXPT","SUGA","BAS")
                                     +DATA(RMT,"FEDM","SUGA","BAS")+DATA(RMT,"SEDM","SUGA","BAS")+DATA(RMT,"LOSM","SUGA","BAS")
                                     +DATA(RMT,"HCOM","SUGA","BAS"));
*
  DATA(RMT,"GROF","OLIO","BAS") $ (NOT DATA(RMT,"GROF","OLIO","BAS"))
                                = MAX(0,                           -DATA(RMT,"IMPT","OLIO","BAS")
                                                                   +DATA(RMT,"EXPT","OLIO","BAS")
                                     +DATA(RMT,"FEDM","OLIO","BAS")+DATA(RMT,"SEDM","OLIO","BAS")+DATA(RMT,"LOSM","OLIO","BAS")
                                     +DATA(RMT,"HCOM","OLIO","BAS")+DATA(RMT,"INDM","OLIO","BAS"));

*$stop
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 5close DATA

* ### block consumer prices: initialization with CAPMOD database values [BAS year]
*
*   --- set consumer prices where missing
*
$batinclude 'util\title.gms' "' Set missing consumer price'"
*

 DATA("NO000000","UVAD",ROWS,"BAS") $ (NOT DATA("NO000000","UVAD",ROWS,"BAS"))  = DATA("SE000000","UVAD",ROWS,"BAS");
*
* --- average consumer prices for aggregates
*
 DATA(RMAGG,"UVAD",ROWS,"BAS")
    $ SUM(RMS_TO_RM(RMSSUP,RMAGG), (DATA(RMSSUP,"UVAD",ROWS,"BAS")*DATA(RMSSUP,"HCOM",ROWS,"BAS")))

  =  SUM(RMS_TO_RM(RMSSUP,RMAGG), DATA(RMSSUP,"UVAD",ROWS,"BAS")*DATA(RMSSUP,"HCOM",ROWS,"BAS"))
      /SUM(RMS_TO_RM(RMSSUP,RMAGG) $ (DATA(RMSSUP,"UVAD",ROWS,"BAS")*DATA(RMSSUP,"HCOM",ROWS,"BAS")), DATA(RMSSUP,"HCOM",ROWS,"BAS"));
*
 DATA(RMSSUP,"UVAD",ROWS,"BAS")  $ (RMS_TO_RM(RMSSUP,"EU015000") and (NOT DATA(RMSSUP,"UVAD",ROWS,"BAS")))
  = DATA("EU015000","UVAD",ROWS,"BAS");
*
 DATA(RMSSUP,"UVAD",ROWS,"BAS")  $ RMS_TO_RM(RMSSUP,"EU015000")
  = MIN(MAX(DATA(RMSSUP,"UVAD",ROWS,"BAS"),DATA("EU015000","UVAD",ROWS,"BAS")/2),DATA("EU015000","UVAD",ROWS,"BAS")*2);
*
 DATA(RMSSUP,"UVAD",ROWS,"BAS")  $ RMS_TO_RM(RMSSUP,"EU010000")
  = MIN(MAX(DATA(RMSSUP,"UVAD",ROWS,"BAS"),DATA("EU010000","UVAD",ROWS,"BAS")/2),DATA("EU010000","UVAD",ROWS,"BAS")*2);
*
 DATA(RMSSUP,"UVAD",ROWS,"BAS") $ (RMS_TO_RM(RMSSUP,"BUR") and (NOT DATA(RMSSUP,"UVAD",ROWS,"BAS")))
    = DATA("EU010000","UVAD",ROWS,"BAS");

 DATA(RMSSUP,"UVAD",ROWS,"BAS") $ (RMS_TO_RM(RMSSUP,"WBA") and (NOT DATA(RMSSUP,"UVAD",ROWS,"BAS")))
    = DATA("EU010000","UVAD",ROWS,"BAS");

*
*DATA("NO000000","UVAD","SMIP","BAS") = DATA("NO000000","UVAD","SMIP","BAS") * 0.1;
*
*
*   --- for conversion of dollar values into Euro
*
 PARAMETER p_dollarPerEuro "Dollar pro Euro exchange rate" /
    90     1.2768
    91     1.2646
    92     1.2931
    93     1.1677
    94     1.1849
    95     1.2934
    96     1.2530
    97     1.1294
    98     1.1229
*
*  ----    From ECB, official reference rate as daily averages
*
    99     1.0654
    00     0.9209
    01     0.8960
    02     0.9456
    03     1.1312
    04     1.2439
    05     1.2441
*
*   --- for FAPRI: assumption of Euro/US 0.75
*
    14     1.2500
    16     1.4096

  1990     1.2768
  1991     1.2646
  1992     1.2931
  1993     1.1677
  1994     1.1849
  1995     1.2934
  1996     1.2530
  1997     1.1294
  1998     1.1229
  1999     1.0654
  2000     0.9209
  2001     0.8960
  2002     0.9456
  2003     1.1312
  2004     1.2439
  2005     1.2441
*
*   --- for FAPRI: assumption of Euro/US 0.75
*
  2015     1.2500
  2016     1.4096
   /;
*

$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 6pricecons DATA



* ### block capmod database to market balance  [BAS and other yrs]
*
* --------------------------------------------------------------------------------------------------
*
*      ASSIGN FROM DATABASE COLUMNS TO POSITIONS OF THE MARKET MODEL
*
* --------------------------------------------------------------------------------------------------
*
*
*  --- net production: gross minus seed and waste
*
 PARAMETER p_Count;
*
 p_count(XX)    = SUM( CAP_TO_TRD(ROWS,XX), 1.);
*
 SET GROF / GROF,MAPR,LOSF,SEDF,SEDM /;
 SET HCOM / HCOM,LOSM /;
*
$batinclude 'util\title.gms' "' Define production/feed/Processing and prices'"
*
 SET FAOY / BAS,FAO_Y,Y/;
*

 DATA(RMS,"Prod",ROWS,FAOY)
    = MAX(0.,
              DATA(RMS,"GROF",ROWS,FAOY) $ DATA(RMS,"GROF",ROWS,FAOY)
             +DATA(RMS,"MAPR",ROWS,FAOY) $ (NOT DATA(RMS,"GROF",ROWS,FAOY))
             -DATA(RMS,"SEDM",ROWS,FAOY)
             -DATA(RMS,"SEDF",ROWS,FAOY)
             -DATA(RMS,"LOSF",ROWS,FAOY));

*  --- Assign production in final simulation year for countries covered by CAPTRD
*      Note: The growth rates for RMS not in RMSSUP (eg USA) are using FAO_Y, not Y below

 DATA(RMSSUP,"Prod",ROWS,"Y") $ (not nonCocoRows(ROWS))
    = MAX(0.,
               DATA(RMSSUP,"GROF",ROWS,"TRD") $ DATA(RMSSUP,"GROF",ROWS,"TRD")
             + DATA(RMSSUP,"MAPR",ROWS,"TRD") $ (NOT DATA(RMSSUP,"GROF",ROWS,"TRD"))
*
*            --- substact seed on market - if CAPTRD results is missing use base
*
             - (  DATA(RMSSUP,"SEDM",ROWS,"TRD")
                + DATA(RMSSUP,"SEDM",ROWS,"BAS") $ ( (NOT DATA(RMSSUP,"SEDM",ROWS,"TRD"))
                                                     and (DATA(RMSSUP,"GROF",ROWS,"TRD") + DATA(RMSSUP,"MAPR",ROWS,"TRD"))))
*
*            --- substact seed on farmet - if CAPTRD results is missing use base
*
             - (   DATA(RMSSUP,"SEDF",ROWS,"TRD")
                 + DATA(RMSSUP,"SEDF",ROWS,"BAS") $ ( (NOT DATA(RMSSUP,"SEDF",ROWS,"TRD"))
                                                       and (DATA(RMSSUP,"GROF",ROWS,"TRD") + DATA(RMSSUP,"MAPR",ROWS,"TRD"))))
*
*            --- substact losses on farm - if CAPTRD results is missing use base
*
             - (   DATA(RMSSUP,"LOSF",ROWS,"TRD")
                 + DATA(RMSSUP,"LOSF",ROWS,"BAS") $ ( (NOT DATA(RMSSUP,"LOSF",ROWS,"TRD"))
                                                      and (DATA(RMSSUP,"GROF",ROWS,"TRD") + DATA(RMSSUP,"MAPR",ROWS,"TRD"))))
       );


 DATA(RMSSUP,"Prod",ROWS,"TRD") $ (not nonCocoRows(ROWS)) = DATA(RMSSUP,"Prod",ROWS,"Y");
*
 DATA(RMSSUP,"Prod",ROWS,"CUR") $ (not nonCocoRows(ROWS)) = DATA(RMSSUP,"Prod",ROWS,"BAS");
*
*  --- construct data according to product list of market model
*
*        Note that this presupposes the earlier assignment of PROD for RMSSUP:

 DATA(RMSSUP,"Prod",XX,FAOY) $ (not nonCocoRows(XX)) = SUM( CAP_TO_TRD(ROWS,XX),   DATA(RMSSUP,"Prod",ROWS,FAOY));
*
 DATA(RMSSUP,"Prod","MILK","BAS") = DATA(RMSSUP,"PRCM","MILK","BAS");
 DATA(RMSSUP,"Prod","MILK","CUR") = DATA(RMSSUP,"PRCM","MILK","BAS");


 DATA(RMSSUP,"Levl",XX,"BAS") $ (not nonCocoRows(XX))
    = SUM( (CAP_TO_TRD(ROWS,XX),COLS) $ SAMEAS(COLS,ROWS),  DATA(RMSSUP,COLS,"LEVL","BAS"));

 DATA(RMS,"HCon",XX,FAOY)
                              = SUM( CAP_TO_TRD(ROWS,XX),   DATA(RMS,"HCOM",ROWS,FAOY)
                                                           +DATA(RMS,"LOSM",ROWS,FAOY)
                                                           +DATA(RMS,"INDM",ROWS,FAOY) $ (SED(XX) or MLK(XX)));

 DATA(RMS,"HCon","MILK",FAOY)  = 0;

 DATA(RMS,"Feed",XX,FAOY) = SUM( CAP_TO_TRD(ROWS,XX),   DATA(RMS,"FEDM",ROWS,FAOY));

 DATA(RMS,"Proc",XX,FAOY) = SUM( CAP_TO_TRD(ROWS,XX),    DATA(RMS,"PRCM",ROWS,FAOY)
                                                       + DATA(RMS,"INDM",ROWS,FAOY) $ ((NOT SED(XX)) and (NOT MLK(XX))));


 DATA(RMS,"BioF",XX,FAOY) = SUM( CAP_TO_TRD(ROWS,XX),    DATA(RMS,"BIOF",ROWS,FAOY));
*
*    Ensure that all demand for BIOD ends up in BIOF (but keep non-fuel use of ethanol)

 DATA(RMS,"BioF","BIOD",FAOY) = DATA(RMS,"BioF","BIOD",FAOY) + DATA(RMS,"Proc","BIOD",FAOY);
 DATA(RMS,"Proc","BIOD",FAOY) = 0;

 DATA(RMS,"HCON","MILK",FAOY) = 0;
 DATA(RMS,"FEED","MILK",FAOY) = 0;

*
 DATA(RMS,"Feed","WHEA",FAOY) $ (NOT RMSSUP(RMS)) = DATA(RMS,"FEDM","WHEA",FAOY);
 DATA(RMS,"Hcon","WHEA",FAOY) $ (NOT RMSSUP(RMS)) = DATA(RMS,"HCOM","WHEA",FAOY)+DATA(RMS,"LOSM","WHEA",FAOY);
 DATA(RMS,"Proc","WHEA",FAOY) $ (NOT RMSSUP(RMS)) = DATA(RMS,"PRCM","WHEA",FAOY)+DATA(RMS,"INDM","WHEA",FAOY);
*
 DATA(RMS,"GROF",ROWS,"FAO_Y") = 0;
 DATA(RMS,"HCOM",ROWS,"FAO_Y") = 0;
 DATA(RMS,"LOSM",ROWS,"FAO_Y") = 0;
 DATA(RMS,"INDM",ROWS,"FAO_Y") = 0;
 DATA(RMS,"PRCM",ROWS,"FAO_Y") = 0;
 DATA(RMS,"BIOF",ROWS,"FAO_Y") = 0;
 DATA(RMS,"FEDM",ROWS,"FAO_Y") = 0;


$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 7capmodd DATA


* ### block prices for the regions covered by supply models [only BAS]

*
* ---- consumer and producer prices in nominal terms for countries covered by supply models
*
 DATA(RMSSUP,"Uvad",ROWS,"BAS") = MAX(DATA(RMSSUP,"Uvad",ROWS,"BAS"),DATA(RMSSUP,"Uvap",Rows,"BAS")*1.1);
*
*      -- Fall back solutions for problem cases of UVAD/UVAP

 DATA(RMSSUP,"Uvad","PLMO","BAS") $ (NOT DATA(RMSSUP,"Uvad","PLMO","BAS")) = DATA(RMSSUP,"Uvad","SUNO","BAS");

 DATA(RMSSUP,"Uvag","DDGS","BAS") $ (NOT DATA(RMSSUP,"Uvag","DDGS","BAS")) = DATA(RMSSUP,"Uvag","FCER","BAS") * 0.75;
 DATA(RMSSUP,"Uvap","DDGS","BAS") $ (NOT DATA(RMSSUP,"Uvap","DDGS","BAS")) = DATA(RMSSUP,"Uvag","DDGS","BAS");

 DATA(RMSSUP,"Uvag","FPRI","BAS") $ (NOT DATA(RMSSUP,"Uvag","FPRI","BAS")) = DATA(RMSSUP,"Uvag","FPRO","BAS") * 0.75;
 DATA(RMSSUP,"Uvap","FPRI","BAS") $ (NOT DATA(RMSSUP,"Uvap","FPRI","BAS")) = DATA(RMSSUP,"Uvag","FPRI","BAS");

 DATA(RMSSUP,"Uvag","FENI","BAS") $ (NOT DATA(RMSSUP,"Uvag","FENI","BAS")) = DATA(RMSSUP,"Uvag","FCER","BAS") * 0.75;
 DATA(RMSSUP,"Uvap","FENI","BAS") $ (NOT DATA(RMSSUP,"Uvap","FENI","BAS")) = DATA(RMSSUP,"Uvag","FENI","BAS");
*
 DATA(RMSSUP,"Cpri",XX,"BAS") $ DATA(RMSSUP,"HCon",XX,"BAS")
    = SUM( CAP_TO_TRD(ROWS,XX), DATA(RMSSUP,"UVAD",ROWS,"BAS")*
      (DATA(RMSSUP,"Hcom",ROWS,"BAS")+DATA(RMSSUP,"Losm",ROWS,"BAS")+DATA(RMSSUP,"INDM",ROWS,"BAS") $ SED(XX)))
        /DATA(RMSSUP,"HCon",XX,"BAS");

 DATA(RMAGG,"Hcon",XX,"BAS") = SUM(RMS_TO_RM(RMS,RMAGG), DATA(RMS,"Hcon",XX,"BAS"));
*
 DATA(RMAGG,"Cpri",XX,"BAS") $ DATA(RMAGG,"HCon",XX,"BAS")
    = SUM(RMS_TO_RM(RMS,RMAGG), DATA(RMS,"HCon",XX,"BAS")*DATA(RMS,"Cpri",XX,"BAS"))/DATA(RMAGG,"HCon",XX,"BAS");
*
 DATA(RMSSUP,"Cpri",MLK,"BAS") $ ((NOT DATA(RMSSUP,"Cpri",MLK,"BAS")) and DATA(RMSSUP,"Prod",MLK,"BAS"))
    = SUM( CAP_TO_TRD(ROWS,MLK), DATA(RMSSUP,"UVAD",ROWS,"BAS")*
       DATA(RMSSUP,"Prod",ROWS,"BAS"))/DATA(RMSSUP,"Prod",MLK,"BAS");
*
 DATA(RMS,"Cpri",XX,"BAS") $ (NOT DATA(RMS,"CPri",XX,"BAS"))
    = SUM(RMS_TO_RM(RMS,RM), DATA(RM,"Cpri",XX,"BAS"));
*
 DATA(RMSSUP,"PPri",XX,"BAS") $ DATA(RMSSUP,"Prod",XX,"BAS")
    = SUM( CAP_TO_TRD(ROWS,XX), DATA(RMSSUP,"UVAG",ROWS,"BAS")*DATA(RMSSUP,"Prod",ROWS,"BAS"))
        /DATA(RMSSUP,"Prod",XX,"BAS");
*
*
 DATA(RMSSUP,"PROD",MLK,"BAS") $ (DATA(RMSSUP,"PROD",MLK,"BAS") LE 1.E-3) = 0;
*
 DATA("EU015000","TARS",XX,BAS_AND_Y) $ ( not (DATA("EU015000","Tars",XX,"BAS")) and p_count(XX))
     = SUM( CAP_TO_TRD(ROWS,XX), DATA("EU015000","TARS",ROWS,BAS_AND_Y))/p_count(XX);
*
 DATA("EU015000","TARS",XX,"Y") $ ( not (DATA("EU015000","Tars",XX,"Y"))
                                 and DATA("EU015000","Tars",XX,"BAS") and p_count(XX)
                                 and SUM( CAP_TO_TRD(ROWS,XX), DATA("EU015000","TARS",ROWS,"BAS")))
     = DATA("EU015000","TARS",XX,"BAS") *
     SUM( CAP_TO_TRD(ROWS,XX), DATA("EU015000","TARS",ROWS,"Y")/DATA("EU015000","TARS",ROWS,"BAS"))/p_count(XX);
*
 SET AGGEU(M_ITEMS) / Prod,Levl,HCon,Feed,Proc,BioF /;
*
 DATA(RMAGG,"Prod",ROWS,"BAS") = SUM( RMS_TO_RM(RMS,RMAGG), DATA(RMS,"Prod",ROWS,"BAS"));
 DATA(RMAGG,AGGEU,XX,"BAS")    = SUM( RMS_TO_RM(RMS,RMAGG), DATA(RMS,AGGEU,XX,"BAS"));
*

*
*  --- average yield
*
 DATA(RM,"Yild",XX,"BAS") $ DATA(RM,"Levl",XX,"BAS")
      = DATA(RM,"Prod",XX,"BAS")/DATA(RM,"LEVL",XX,"BAS");
*

$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 8pricesup DATA



*
* ### block trade: calculations over trade flows and correcting market balances accordingly  [mostly BAS]
*


* --- trade flows from RM1 to  RM (importer first)

 SET FlowY(SIMYY);

 FLOWY(SIMYY) = YES $ ( ABS(CALYEA(SIMYY)-CALYEA("BAS")) LE 1);
*
*  --- delete trade flows manually for CREM in Switzerlands as EU exports cannot be silenced by
*      removing imports
*
 p_tradeFlows("CH",RM,"CREM",FLOWY) = 0;
 p_tradeFlows("CH",RM,"PLMO",FLOWY) = 0;
*
* --- three year average trade flows as found in FAO, scaled from
*    metric tons to 1000 metric tons
*



 p_tradeFlows(RM,RM1,XX,"RAW")
    = p_tradeFlows(RM,RM1,XX,"BAS") / 1000.;
*
* --- copy to base (wil be thinned out below)
*
 p_tradeFlows(RM,RM1,XX,"BAS")  = p_tradeFlows(RM,RM1,XX,"RAW");
*
* --- ???? all DDGS trade flows pushed up to at least 2000 tons
*
 p_tradeFlows(RM,RM1,"DDGS","BAS")
   $ p_tradeFlows(RM,RM1,"DDGS","RAW") = MAX(p_tradeFlows(RM,RM1,"DDGS","RAW"),2);
*
* --- three year average trade flows as around 2007,
*    scaled metric tons to 1000 metric tons
*
*
set AveAGLY(simyy)   "3 years average around last year for biofuel tradeflows";
alias(simyy,simyy_1);

 AveAGLY(simyy)   $ ( ((smax((RM,RM1,XXBIOF,simyy_1) $ p_tradeFlows(RM,RM1,XXBIOF,simyy_1), simyy_1.ord) - simyy.ord) LE 2)
   and ((smax((RM,RM1,XXBIOF,simyy_1) $ p_tradeFlows(RM,RM1,XXBIOF,simyy_1), simyy_1.ord) - simyy.ord) GE 0)) = yes;

 p_tradeFlows(RM,RM1,XXBIOF,"AGL_Y") $ (sum(AveAGLY $ (p_tradeFlows(RM,RM1,XXBIOF,AveAGLY)),1))
    = (sum(AveAGLY,p_tradeFlows(RM,RM1,XXBIOF,AveAGLY)) / sum(AveAGLY $ (p_tradeFlows(RM,RM1,XXBIOF,AveAGLY)),1)) / 1000.;

 p_tradeFlows(RM,RM1,XXBIOF,"AGL_Y") $ (not p_tradeFlows(RM,RM1,XXBIOF,"AGL_Y")) = p_tradeFlows(RM,RM1,XXBIOF,"BAS");

* --- biodiesel imports from US into EU27 negligible after 2009 (anti-dumping tariffs)
*     workaround: take last known value as most representative over the period

 p_tradeFlows(EU27AGGS,'USA',"BIOD","AGL_Y") $ sum(EU27AGGS1,p_tradeFlows(EU27AGGS1,'USA',"BIOD","AGL_Y"))
  = 0.6 * p_tradeFlows(EU27AGGS,'USA',"BIOD","AGL_Y")/sum(EU27AGGS1,p_tradeFlows(EU27AGGS1,'USA',"BIOD","AGL_Y"));

 p_tradeFlows(EU27AGGS,'ARG',"BIOD","AGL_Y") $ sum(EU27AGGS1,p_tradeFlows(EU27AGGS1,'ARG',"BIOD","AGL_Y"))
  = 1179 * p_tradeFlows(EU27AGGS,'ARG',"BIOD","AGL_Y")/sum(EU27AGGS1,p_tradeFlows(EU27AGGS1,'ARG',"BIOD","AGL_Y"));

 p_tradeFlows(EU27AGGS,'MAL',"BIOD","AGL_Y") $ sum(EU27AGGS1,p_tradeFlows(EU27AGGS1,'MAL',"BIOD","AGL_Y"))
  = 274 * p_tradeFlows(EU27AGGS,'MAL',"BIOD","AGL_Y")/sum(EU27AGGS1,p_tradeFlows(EU27AGGS1,'MAL',"BIOD","AGL_Y"));

 p_tradeFlows(EU27AGGS,'INDO',"BIOD","AGL_Y") $ sum(EU27AGGS1,p_tradeFlows(EU27AGGS1,'INDO',"BIOD","AGL_Y"))
  = 200 * p_tradeFlows(EU27AGGS,'INDO',"BIOD","AGL_Y")/sum(EU27AGGS1,p_tradeFlows(EU27AGGS1,'INDO',"BIOD","AGL_Y"));

*
* --- delete all trade flows data for single years
*

*
*  --- determine the biggest import and export flows to/from a region
*
 PARAMETER p_biggestTradeFlow(RM,RM,XX,*);
*
*  --- set to a value if RM,RM1 is the biggest export from RM1 to any destination
*
 p_biggestTradeFlow(RM,RM1,XX,"Export")
    = p_tradeFlows(RM,RM1,XX,"BAS")
         $ ( SMAX(RM2 $ (NOT SAMEAS(RM2,RM1)), p_tradeFlows(RM2,RM1,XX,"BAS")) eq p_tradeFlows(RM,RM1,XX,"BAS"));
*
*  --- set to a value if RM,RM1 is the biggest import to RM1 from any origin
*
 p_biggestTradeFlow(RM,RM1,XX,"Import")
   = p_tradeFlows(RM,RM1,XX,"BAS")
       $ (SMAX(RM2  $ (NOT SAMEAS(RM2,RM)),  p_tradeFlows(RM,RM2,XX,"BAS"))  eq p_tradeFlows(RM,RM1,XX,"BAS"));


*option p_biggestTradeFlow:2:3:1;
*DISPLAY p_biggestTradeFlow;

*
*    --- production of FPRI and FENI is derived from export of the trade block if missing
*
 DATA(RMS,"Prod",RESIMPX,"BAS") $ (NOT DATA(RMS,"PROD",RESIMPX,"BAS") and (not (RMSSUP(RMS) or sameas(RMS,"CH"))))
  = SUM( (RM1,RM) $ RMS_TO_RM(RMS,RM), p_tradeFlows(RM1,RM,RESIMPX,"BAS"))/SUM(RMS_TO_RM(RMS1,RM) $ RMS_TO_RM(RMS,RM),1);
*
*    --- feed use of FPRI and FENI is derived from imports of the country if missing
*
 DATA(RMS,"Feed",RESIMPX,"BAS") $ (NOT DATA(RMS,"Feed",RESIMPX,"BAS") and (not (RMSSUP(RMS) or sameas(RMS,"CH"))))
   = SUM( (RM1,RM) $ RMS_TO_RM(RMS,RM), p_tradeFlows(RM,RM1,RESIMPX,"BAS"))/SUM(RMS_TO_RM(RMS1,RM) $ RMS_TO_RM(RMS,RM),1);
*
*    --- production of DDGS derived from export of the trade block if missing
*
 DATA(RMS,"Prod","DDGS","BAS") $ (NOT DATA(RMS,"PROD","DDGS","BAS") and (not (RMSSUP(RMS) or sameas(RMS,"CH"))))
  = SUM( (RM,RM1) $ RMS_TO_RM(RMS,RM), p_tradeFlows(RM1,RM,"DDGS","BAS"))/SUM(RMS_TO_RM(RMS1,RM) $ RMS_TO_RM(RMS,RM),1);
*
*    --- feed use of DDGS is derived from imports of the country if missing
*
 DATA(RMS,"Feed","DDGS","BAS") $ (NOT DATA(RMS,"Feed","DDGS","BAS") and (not (RMSSUP(RMS) or sameas(RMS,"CH"))))
   = SUM( (RM,RM1) $ RMS_TO_RM(RMS,RM), p_tradeFlows(RM,RM1,"DDGS","BAS"))/SUM(RMS_TO_RM(RMS1,RM) $ RMS_TO_RM(RMS,RM),1);

*
*  ---- in base year, Armington aggregates are set to physical quantities
*       (by adjusting the shift parameter)
*
*
* --- total world trade
*
  data("world","Impt",xx,"BAS")
     = sum( (RM,RM1) $ (not sameas(RM,RM1)), p_tradeFlows(RM,RM1,XX,"BAS"));
*
*  ---- use not yet thinned imports and exports flows to define imports and exports
*
 DATA(RM,"Imports",XX,"BAS") = SUM(RM1 $ (NOT SAMEAS(RM,RM1)), p_tradeFlows(RM,RM1,XX,"BAS"));
 DATA(RM,"Exports",XX,"BAS") = SUM(RM1 $ (NOT SAMEAS(RM,RM1)), p_tradeFlows(RM1,RM,XX,"BAS"));

 DATA("CH","IMPORTS",XX,"BAS") = DATA("CH","IMPT",XX,"BAS");
 DATA("CH","EXPORTS",XX,"BAS") = DATA("CH","EXPT",XX,"BAS");
*
 set demd(cols)/ feed,hcon,proc,biof/;
 option kill=rmt;rmt(rms) = yes;rmt(rmssup) = no;

 data(rm,"Demand",XX,"BAS") = sum(rm_to_rms(rm,rms),
                               DATA(rms,"HCon",XX,"BAS")
                             + DATA(rms,"Feed",XX,"BAS")
                             + DATA(rms,"PROC",XX,"BAS")
                             + DATA(rms,"BIOF",XX,"BAS"));

 data(rm,"prod",XX,"BAS") = sum(rm_to_rms(rm,rms), DATA(rms,"Prod",XX,"BAS"));
*
* --- scale demand side of balance to fit production plus net trade
*
 data(rmt,demd,xx,"bas") $ (data(rmt,demd,xx,"BAS") and data(rmt,"demand",xx,"BAS"))
     = data(rmt,demd,xx,"bas") * sum(rms_to_rm(rms,rm) $ sameas(rmt,rms),
                                    MAX(0,data(rm,"prod",xx,"bas") + data(rm,"imports",xx,"bas") - data(rm,"exports",xx,"bas"))
                                            /data(rm,"demand",xx,"bas"));
*
* --- re-calculate demand
*
 data(rms,"Demand",XX,"BAS")
     = DATA(rms,"HCon",XX,"BAS")  + DATA(rms,"Feed",XX,"BAS")  + DATA(rms,"PROC",XX,"BAS") + DATA(rms,"BIOF",XX,"BAS");


 DATA(RM,"Arm1",XX,"BAS")      = SUM( RMS_TO_RM(RMS,RM), DATA(RMS,"Demand",XX,"BAS"));
*
 SET AGGEU(M_ITEMS) / Prod,Levl,HCon,Feed,Proc,BioF /;

*
 DATA(RMAGG,"Prod",ROWS,"BAS") = SUM( RMS_TO_RM(RMS,RMAGG), DATA(RMS,"Prod",ROWS,"BAS"));
 DATA(RMAGG,AGGEU,XX,"BAS")    = SUM( RMS_TO_RM(RMS,RMAGG), DATA(RMS,AGGEU,XX,"BAS"));
*
*  ---- second stage Armington aggregate are in base year equal to imports
*
 DATA(RM,"Arm2",XX,"BAS")  = DATA(RM,"Imports",XX,"BAS");
*
*  ---- calculate domestic sales residually
*
 p_tradeFlows(RM,RM,XX,"BAS") $ DATA(RM,"Arm1",XX,"BAS")
                                 = MAX(   (0.5 + 0.5 $ (NOT DATA(RM,"Prod",XX,"BAS")))
                                              * MAX( DATA(RM,"Arm1",XX,"BAS")-DATA(RM,"Imports",XX,"BAS"),0.)
                                        + 0.5 * MAX( DATA(RM,"Prod",XX,"BAS")-DATA(RM,"Exports",XX,"BAS"),0.),0.1);
*
*  ---- set into data array
*
 DATA(RM,"DSales",XX,"BAS")     = p_tradeFlows(RM,RM,XX,"BAS");

 DATA(RM,"DSales",XXBIOF,"BAS")     = DATA(RM,"Prod",XXBIOF,"BAS") - DATA(RM,"Exports",XXBIOF,"BAS") ;
 p_tradeFlows(RM,RM,XXBIOF,"BAS") = DATA(RM,"DSales",XXBIOF,"BAS");
*
* --- thin out trade matrix (~42.000 non-zeros in starting point, reduced to ~21.000)
*     (will lead to some error compared to above calculation of imports / exports
*      => produces a downward corrected to imports and exports with
*         effects also on the market balances, and an upward correction
*         of the remaining flows
*

  set cutOffs / c  "Cutoff relative to production or demand"
                ct "Cutoff relative to imports or exports" /;

  parameter p_cutOffs(XX,cutOffs);

*
* --- cut-offs are generated by a separate program which defines the cut-offs
*     such as to avoid thinning (in percentage terms) some products more than others
*
$IF NOT EXIST "%results_in%\arm\filterTradeFlowsCutoffs.gdx" $ABORT "%results_in%\arm\filterTradeFlowsCutoffs.gdx" is missing, in %system.fn%, line %system.incline%
  execute_load "%results_in%\arm\filterTradeFlowsCutoffs.gdx" p_cutOffs;

*  p_tradeFlows(RMALL,RMALL1,XX,SIMYY) = 0;
*  p_tradeFlows(RMALL,RMALL1,"AMAN",SIMYY) = 0;
*  p_tradeFlows(RM,RM1,XX,"AGL_Y") = 0;
  p_tradeFlows(RM,RM1,XX,"RAW") = 0;

  p_tradeFlows(RM,RM1,XX,"BAS")
*
    $ ( (not sameas(RM,RM1))
*
*      -- deleted flows are:
*
*      --- not more than x % of production of exporter
*
       and (p_tradeFlows(RM,RM1,XX,"BAS") LE DATA(RM1,"PROD",XX,"BAS")*p_cutOffs(XX,"c"))
*
*      --- not more than x % of demand of importer
*
       and (p_tradeFlows(RM,RM1,XX,"BAS") LE DATA(RM,"ARM1",XX,"BAS")*p_cutOffs(XX,"c"))
*
*      --- not more than x % of exports
*
       and (p_tradeFlows(RM,RM1,XX,"BAS") LE DATA(RM1,"Expt",XX,"BAS")*p_cutOffs(XX,"ct"))
*
*      --- not more than x % of imports
*
       and (p_tradeFlows(RM,RM1,XX,"BAS") LE DATA(RM,"ARM1",XX,"BAS")*p_cutOffs(xx,"ct"))
*
*      --- don't delete largest trade flows
*
       and (p_biggestTradeFlow(RM,RM1,XX,"Export") eq 0)
       and (p_biggestTradeFlow(RM,RM1,XX,"Import") eq 0)) = 0.;

 option p_tradeFlows:2:3:1;

*
 option kill=p_biggestTradeFlow;


*
*  ---- world aggregates
*
 DATA("RW",M_ITEMS,XX,"BAS")   = SUM(RM, DATA(RM,M_ITEMS,XX,"BAS"));

$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceTradeflowsPrep 9trade p_tradeFlows
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 9trade DATA





* ### block prices3: market, producer and consumer prices plus margins [for BAS]

*
*  ---- use Prices from AGLINK
*

  DATA(RMALL,"PMrk",XX,"BAS") $ ((NOT DATA(RMALL,"PMrk",XX,"BAS")))
     = p_dataMarket(RMALL,"PMRK",XX,"BAS");

  DATA(RMALL,"PMrk",XX,"BAS") $ ((NOT DATA(RMALL,"PMrk",XX,"BAS")))
     = p_dataMarket(RMALL,"PPRI",XX,"BAS");

  DATA(RMALL,"PPri",XX,"BAS") $ ((NOT DATA(RMALL,"PPri",XX,"BAS")))
     = p_dataMarket(RMALL,"PMrk",XX,"BAS");
*
*  ---- Use FAPRI market prices in the model where no AGLINK prices are found
*

  DATA(RMALL,"PMrk",XX,"BAS") $ ((NOT DATA(RMALL,"PMrk",XX,"BAS")) AND SUM(AYEARS, p_fapriData(RMALL,"PMRK",XX,AYEARS)))
     = SUM(AYEARS, p_fapriData(RMALL,"PMRK",XX,AYEARS) )/CARD(AYEARS);

*
*  --- calculate EU, WBA, TUR and NO000 market prices from unit value producers
*
  DATA(RM,"PMrk",XX,"BAS") $ SUM((RMS_TO_RM(RMSSUP,RM),CAP_TO_TRD(OM,XX)), DATA(RMSSUP,"GROF",OM,"BAS"))
*pw270411 Why is it reasonable to pick always the larger price for supply model regions (if both are given) ??
*    = MAX(DATA(RM,"PMrk",XX,"BAS"),SUM((RMS_TO_RM(RMSSUP,RM),CAP_TO_TRD(OM,XX)), DATA(RMSSUP,"GROF",OM,"BAS") * DATA(RMSSUP,"UVAG",OM,"BAS"))
     = SUM((RMS_TO_RM(RMSSUP,RM),CAP_TO_TRD(OM,XX)), DATA(RMSSUP,"GROF",OM,"BAS") * DATA(RMSSUP,"UVAG",OM,"BAS"))
     / SUM((RMS_TO_RM(RMSSUP,RM),CAP_TO_TRD(OM,XX)), DATA(RMSSUP,"GROF",OM,"BAS"));
*mih if there is no UVAG for the the given XX then UVAD (consumer price) will be used later
*mih there is no UVAG for SUGA in the capreg results, only UVAD
*
  DATA(RMALL,"PPri",XX,"BAS") $ ((NOT DATA(RMALL,"PPri",XX,"BAS")) AND SUM(AYEARS, p_fapriData(RMALL,"PPRI",XX,AYEARS)))
     = SUM(AYEARS, p_fapriData(RMALL,"PPRI",XX,AYEARS) )/CARD(AYEARS);

  DATA(RMALL,"PPri",XX,"BAS") $ DATA(RMALL,"PPri",XX,"BAS")
* Again: Why is it reasonable to pick always the larger price (if both are given) ??
     = MAX(DATA(RMALL,"PPri",XX,"BAS"),DATA(RMALL,"PMrk",XX,"BAS"));

  DATA(RMALL,"PMrk",XX,"BAS") $ ((NOT DATA(RMALL,"PMrk",XX,"BAS")) and DATA(RMALL,"PPRI",XX,"BAS"))
     = DATA(RMALL,"PPri",XX,"BAS");

  DATA(RMALL,"CPri",XX,"BAS") $ ((NOT DATA(RMALL,"Cpri",XX,"BAS")) AND SUM(AYEARS, p_fapriData(RMALL,"CPri",XX,AYEARS)))
     = SUM(AYEARS, p_fapriData(RMALL,"CPri",XX,AYEARS) )/CARD(AYEARS);

  DATA(RMALL,"CPri",XX,"BAS") $ DATA(RMALL,"CPri",XX,"BAS")
* Again: Why is it reasonable to pick always the larger price (if both are given) ??
    = MAX(DATA(RMALL,"CPri",XX,"BAS"),DATA(RMALL,"PMrk",XX,"BAS"),DATA(RMALL,"PPri",XX,"BAS"));


*  --- use for EU27, WBA and NO values from economic accounts
*pw missing comments (1) We are temporarily assigning candidates to be aggregated to RM.PMRK to individual RMSSUP
*                    (2) We are using UVAP and not UVAG as about 30 lines above for unknown reasons.
*
*  --- use for EU27, WBA, TUR and NO market prices values from economic accounts
*
  DATA(RMSSUP,"PMrk",XX,"BAS") $ (DATA(RMSSUP,"PROD",XX,"BAS") and SUM( CAP_TO_TRD(OM,XX), DATA(RMSSUP,"PROD",OM,"BAS")))
    = SUM( CAP_TO_TRD(OM,XX), DATA(RMSSUP,"PROD",OM,"BAS") * DATA(RMSSUP,"UVAP",OM,"BAS"))/ DATA(RMSSUP,"PROD",XX,"BAS");
*
*  --- if missing: try PRIC
*
  DATA(RMSSUP,"PMrk",XX,"BAS") $ (DATA(RMSSUP,"PROD",XX,"BAS") and SUM( CAP_TO_TRD(OM,XX), DATA(RMSSUP,"PROD",OM,"BAS")) and (NOT DATA(RMSSUP,"PMrk",XX,"BAS")))
    = SUM( CAP_TO_TRD(OM,XX), DATA(RMSSUP,"PROD",OM,"BAS") * DATA(RMSSUP,"PRIC",OM,"BAS"))/ DATA(RMSSUP,"PROD",XX,"BAS");
*
*  --- if missing: try PPRI (producer from ALGINK / FAPRI etc.)
*
  DATA(RMSSUP,"PMrk",XX,"BAS") $ (DATA(RMSSUP,"PROD",XX,"BAS") and SUM( CAP_TO_TRD(OM,XX), DATA(RMSSUP,"PROD",OM,"BAS")) and (NOT DATA(RMSSUP,"PMrk",XX,"BAS")))
    = SUM( CAP_TO_TRD(OM,XX), DATA(RMSSUP,"PROD",OM,"BAS") * DATA(RMSSUP,"PPRI",OM,"BAS"))/ DATA(RMSSUP,"PROD",XX,"BAS");
*
*
*  --- use for EU27, WBA and NO values from FAPRI if existing, and no price from EAA is available
*pw  Misleading comment as othr stuff than FAPRI may be on data here

  DATA(RMSSUP,"PMrk",XX,"BAS") $ ((NOT DATA(RMSSUP,"PMrk",XX,"BAS"))
                                     and SUM(RMS_TO_RM(RMSSUP,RMAGG), DATA(RMAGG,"Pmrk",XX,"BAS")))
   = SUM(RMS_TO_RM(RMSSUP,RMAGG), DATA(RMAGG,"Pmrk",XX,"BAS"));
*
*  --- use for EU27, WBA and NO values consumer prices, if neither EAA or FAPRI are available
*
  DATA(RMSSUP,"PMrk",XX,"BAS") $ ((NOT DATA(RMSSUP,"PMrk",XX,"BAS"))
                                     and DATA(RMSSUP,"PROD",XX,"BAS"))
   = SUM( CAP_TO_TRD(ROWS,XX), DATA(RMSSUP,"PROD",ROWS,"BAS") * DATA(RMSSUP,"UVAD",ROWS,"BAS"))
         / DATA(RMSSUP,"PROD",XX,"BAS");
*
*  --- aggregate from single countries to country aggregates of supply model
*pw    (1) This overwrites any previous assignment from FAPRI for European regions
*      (2) Subsequnetly we should clean up and delete all RMSSUP.PMRK

  DATA(RMAGG,"PMrk",XX,"BAS") $ DATA(RMAGG,"PROD",XX,"BAS")
    = SUM(RMS_TO_RM(RMSSUP,RMAGG), DATA(RMSSUP,"PMrk",XX,"BAS")*DATA(RMSSUP,"PROD",XX,"BAS"))/DATA(RMAGG,"PROD",XX,"BAS");

*
  DATA(RMSSUP,"PMrk",XX,"BAS") $ SUM(RMS_TO_RM(RMSSUP,RMAGG) $ (NOT SAMEAS(RMSSUP,RMAGG)), 1. )
    = 0;
*
*
*  --- include soy prices from spatial trade model (year 2005)
*
*$include '..\dat\arm\soyData_TJModel.gms'

* DATA(RALL,"PPRI",ROWS,"BAS")  = soyData(RALL,"PMRK",ROWS);
* DATA(RALL,"PMRK",ROWS,"BAS")  = soyData(RALL,"PMRK",ROWS);

*
*  --- Population data input
*      Read population data and forecasts from the United Nations.
*      (downloaded from web site)
*      Unit is 1000 people, and data is provided for CAPRI
*      regions via a mapping inside allpop.gms
*

   PARAMETER p_worldPop(*,*);

$IF NOT EXIST "%results_in%\global\allpop.gdx" $ABORT "%results_in%\global\allpop.gdx" is missing, in %system.fn%, line %system.incline%
   execute_load "%results_in%\global\allpop.gdx" p_WorldPop;

$gdxin "%results_in%\global\allpop.gdx"
$load meta
$gdxin
*
*  --- Assign base year population for regions and aggregates
*      (NOTE: Population in the simulation year will be taken from the main source for captrd and global.gms
*             The UN data may be imposed later on if desired, but they have not been used in the baseline)
*
   p_worldPop(SIMYY,RM) = SUM(RMS_TO_RM(RMS,RM), p_worldPop(SIMYY,RMS));
   DATA(RMALL,"INHA","LEVL","BAS") = SUM(SIMYY $ (CALYEA("BAS") EQ CALYEA(SIMYY)), p_worldPop(SIMYY,RMALL));
*
*  --- ERROR CHECK POPULATION:
*      At this point, all regions in RMS and RM need to have population for
*      BAS and Y. If not, exit with an error and show where data is missing.
*
   IF(   SUM(RMS $ ((NOT DATA(RMS,"INHA","Levl","BAS")) ), 1)
      OR SUM(RM  $ ((NOT DATA(RM ,"INHA","Levl","BAS")) ), 1),

        RUNR(RALL) = NO;
        RUNR(RMS) $ (NOT DATA(RMS,"INHA","Levl","BAS")) = YES;
        RUNR(RM)  $ (NOT DATA(RM ,"INHA","Levl","BAS")) = YES;
        DISPLAY "Population data is missing for BASE YEAR for the following regions: ", RUNR;

        DISPLAY "The following population data was used: ", p_WorldPop;
        ABORT "Error in data_prep.gms. Population data for BAS missing.";
   ELSE
        DISPLAY "Read population from UN for BAS. Check successful!";
   );
*
*  ---- Initialisation of cosumer price margin
*       as difference betwen consumer price and farm gate prices
*
  DATA(RMSSUP,"Cmrg",XX,"BAS") $ DATA(RMSSUP,"Hcon",XX,"BAS")
  = MAX(0,SUM( CAP_TO_TRD(ROWS,XX),
      (DATA(RMSSUP,"Uvad",ROWS,"BAS")-DATA(RMSSUP,"Uvap",Rows,"BAS"))
         *(DATA(RMSSUP,"Hcom",ROWS,"BAS")+DATA(RMSSUP,"Losm",ROWS,"BAS")))
        ) / DATA(RMSSUP,"Hcon",XX,"BAS");


 DATA(RMS,"Ince","PerCap","BAS") = DATA(RMS,"Ince","LEVL","BAS") / DATA(RMS,"INHA","LEVL","BAS");

 DATA(RMS,"Cmrg",XX,"BAS")   $ (DATA(RMS,"HCon",XX,"BAS") and DATA(RMS,"Ince","PerCap","BAS") and (NOT DATA(RMS,"Cmrg",XX,"BAS")))

     =                  +  0.1/3 * DATA("DE000000","Cmrg",XX,"BAS")
                        +  0.1/3 * DATA("FR000000","Cmrg",XX,"BAS")
                        +  0.1/3 * DATA("DK000000","Cmrg",XX,"BAS")

       + MIN(DATA("DE000000","Ince","PerCap","BAS"),DATA(RMS,"Ince","PerCap","BAS"))/DATA("DE000000","Ince","PerCap","BAS")
                        *  0.3 * DATA("DE000000","Cmrg",XX,"BAS")
       + MIN(DATA("FR000000","Ince","PerCap","BAS"),DATA(RMS,"Ince","PerCap","BAS"))/DATA("FR000000","Ince","PerCap","BAS")
                        *  0.3 * DATA("FR000000","Cmrg",XX,"BAS")
       + MIN(DATA("DK000000","Ince","PerCap","BAS"),DATA(RMS,"Ince","PerCap","BAS"))/DATA("DK000000","Ince","PerCap","BAS")
                        *  0.3 * DATA("DK000000","Cmrg",XX,"BAS");


 DATA(RMS,"Cmrg",XX,"BAS")   $ (not DATA(RMS,"Cmrg",XX,"BAS") and (not SUM(SAMEAS(XXBIOF,XX),1)))
    = DATA("DE000000","Cmrg",XX,"BAS") * 0.5;
*
*
*      -- Security measure in favour of some minimum share of producer prices relative to CPri.
*pw       NOTE1: This initialisation will be overwritten with the fitit1 result from datacal.gms, so some adjustment will occur anyway.
*         NOTE2: For RMSSUP we have CMrg=UVAD-UVAP=CPRI-UVAP such that the statement increases CPRI if:
*                CMrg*1.1=UVAD*1.1-UVAP*1.1>UVAD <=> UVAD * 0.1/1.1 > UVAP. So Cpri is increased if CPri is already large.
*                At least for RMSSUP, this is not reasonable.
 DATA(RMS,"CPri",XX,"BAS") $ (    (NOT XXBIOF(XX))
                              and (not (RMSSUP(RMS) and DATA(RMS,"Uvad",XX,"BAS") and DATA(RMS,"Uvap",XX,"BAS"))))
                              = MAX(DATA(RMS,"CPri",XX,"BAS"),DATA(RMS,"Cmrg",XX,"BAS")*1.1);

 DATA(RMS,"Cmrg",XXBIOF,"BAS") = eps;
*
*pw  Missing comment: (1) Why deleting all consumer prices from above??
*                     (2) Why assigning at all to CPRI above??
*
 DATA(RMS,"CPRI",XX,"BAS") $ (NOT RMSSUP(RMS))
    = SUM(RMS_TO_RM(RMS,RM), DATA(RM,"Pmrk",XX,"BAS")
                             + DATA(RMS,"CMrg",XX,"BAS") + DATA(RMS,"Ctax",XX,"BAS") - DATA(RM,"CSEd",XX,"BAS") - DATA(RM,"CSEi",XX,"BAS"));

*
* --- calculate production weighted mean world market prices
*
  DATA("RW","PMrk",XX,"BAS") $  SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),  DATA(RM,"Prod",XX,"BAS"))
    = SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),   DATA(RM,"PMrk",XX,"BAS")*DATA(RM,"Prod",XX,"BAS"))
                                /SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),   DATA(RM,"Prod",XX,"BAS"));


*
* --- Cut off points for outliers of market prices:  (1) > 60% over max and >200% of mean
*                                              and   (2) < 140% of min  and <50% of mean prices

*mih# check outliers before deleting them..
*parameter p_price_outliers(RM, XX, *) "outliers in market prices for the BAS year";
*p_price_outliers(RM, XX, "yesno")  $  (    (DATA(RM,"PMrk",XX,"BAS") GE SMAX(RM1 $ DATA(RM1,"PMrk",XX,"BAS"), DATA(RM1,"PMrk",XX,"BAS"))*0.60)
*                               and (DATA(RM,"PMrk",XX,"BAS") GT 2.0 * DATA("RW","PMrk",XX,"BAS"))) = 1;
*p_price_outliers(RM, XX, "yesno")  $  (    (DATA(RM,"PMrk",XX,"BAS") LE SMIN(RM1 $ DATA(RM1,"PMrk",XX,"BAS"), DATA(RM1,"PMrk",XX,"BAS"))*1.40)
*                               and (DATA(RM,"PMrk",XX,"BAS") LE 0.5 * DATA("RW","PMrk",XX,"BAS"))) = 1;
*
* p_price_outliers(RM, XX, "PMRK") $ p_price_outliers(RM, XX, "yesno") =DATA(RM,"PMrk",XX,"BAS") ;
*display "outliers for PMRK", p_price_outliers;
Execute_unload "%scrdir%\test1.gdx";
*
  DATA(RM,"PMrk",XX,"BAS") $  (    (DATA(RM,"PMrk",XX,"BAS") GE SMAX(RM1 $ DATA(RM1,"PMrk",XX,"BAS"), DATA(RM1,"PMrk",XX,"BAS"))*0.60)
                               and (DATA(RM,"PMrk",XX,"BAS") GT 2.0 * DATA("RW","PMrk",XX,"BAS"))) = 0;
  DATA(RM,"PMrk",XX,"BAS") $  (    (DATA(RM,"PMrk",XX,"BAS") LE SMIN(RM1 $ DATA(RM1,"PMrk",XX,"BAS"), DATA(RM1,"PMrk",XX,"BAS"))*1.40)
                               and (DATA(RM,"PMrk",XX,"BAS") LE 0.5 * DATA("RW","PMrk",XX,"BAS"))) = 0;
*
*  --- calculate mean world market prices based on AGLINK/FAPRI result after cutting of tails
*pw: This is NEVER executed as RW.PMrk has been assigned accordingly about 15 lines above
  DATA("RW","PMrk",XX,"BAS") $ ((NOT DATA("RW","PMrk",XX,"BAS")) and SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),  DATA(RM,"Prod",XX,"BAS")))
    = SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),   DATA(RM,"PMrk",XX,"BAS")*DATA(RM,"Prod",XX,"BAS"))
                                /SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),   DATA(RM,"Prod",XX,"BAS"));

*
* -- replace outliers by mean
*
  DATA(RM,"PMrk",XX,"BAS") $ (NOT DATA(RM,"PMrk",XX,"BAS")) = DATA("RW","PMrk",XX,"BAS") ;
*
* p_transpCost(RM,RM,XX,"Mean") $  (p_transpCost(RM,RM,XX,"Mean") GE SMAX(RM1, p_transpCost(RM1,RM1,XX,"Mean"))*0.75) = 0;
* p_transpCost(RM,RM,XX,"Mean") $  (p_transpCost(RM,RM,XX,"Mean") LE SMIN(RM1, p_transpCost(RM1,RM1,XX,"Mean"))*1.25) = 0;
*
* --- if FAPRI price is unavailable: use FOB price from FAO statistics
*
*
*  ---- load transport cost estimates generated by global.gms
*
$IF NOT EXIST "%results_in%\global\tc_%BAS%.gdx" $ABORT "%results_in%\global\tc_%BAS%.gdx" is missing, in %system.fn%, line %system.incline%
  execute_load "%results_in%\global\tc_%BAS%.gdx" p_transpCost;
*
  SET Tc_states / Mean,Var,Min,Max /;
*
* -- trade on fish and acquatic is missing, estimate from poultry/pig meat
*
  p_transpCost(RM,RM1,"FFIS",Tc_states) = p_transpCost(RM,RM1,"POUM",Tc_states) * 1.5;
  p_transpCost(RM,RM1,"SFIS",Tc_states) = p_transpCost(RM,RM1,"POUM",Tc_states) * 1.8;
  p_transpCost(RM,RM1,"OAQU",Tc_states) = p_transpCost(RM,RM1,"POUM",Tc_states) * 2.5;


*pw --- Diagonal elements of p_transpCost are the FOB prices
  DATA(RM,"PMrk",XX,"BAS") $ (NOT DATA(RM,"PMrk",XX,"BAS")) = p_transpCost(RM,RM,XX,"Mean");

  p_transpCost(RM,RM1,XXBIOF,"Mean") $ (NOT p_transpCost(RM,RM1,XXBIOF,"Mean")and SUM(XOIL $ p_transpCost(RM,RM1,XOIL,"Mean"),1))
   = SUM(XOIL,p_transpCost(RM,RM1,XOIL,"Mean"))/SUM(XOIL $ p_transpCost(RM,RM1,XOIL,"Mean"),1);

  p_transpCost(RM,RM1,XXBIOF,"Mean") $ (NOT p_transpCost(RM,RM1,XXBIOF,"Mean"))
   = DATA("RW","PMrk",XXBIOF,"BAS")*0.2;


*pw270411 This is unmotivated and redundant: First we assing to a subset of XX, and subsequnetly to the full set XX??
$ontext
  set xxPmrk(XX);
  XXPMrk(XX) $ SUM(RM, p_transpCost(RM,RM,XX,"Mean")) = YES;
  xxPMrk(XXBIOF) = YES;

  DATA("RW","PMrk",XXPMrk,"BAS") $ SUM(RM $ DATA(RM,"PMrk",XXPMrk,"BAS"),  DATA(RM,"Prod",XXPMrk,"BAS"))
    = SUM(RM $ DATA(RM,"PMrk",XXPMrk,"BAS"),   DATA(RM,"PMrk",XXPMrk,"BAS")*DATA(RM,"Prod",XXPMrk,"BAS"))
                                /SUM(RM $ DATA(RM,"PMrk",XXPMrk,"BAS"),   DATA(RM,"Prod",XXPMrk,"BAS"));
$offtext
*
*  --- if world price is still missing, use average of market prices (even if only taken from CAPRI data),
*      first based on production weights

*pw  DATA("RW","PMrk",XX,"BAS") $ ((NOT DATA("RW","PMrk",XX,"BAS")) and SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),  DATA(RM,"Prod",XX,"BAS")))

*  --- Recalculated production weighted world average price
*      NOTE: This average gives a different result than above (about line 880) because
*            (1) Outliers have been removed
*            (2) FOB prices have been used for completing missing prices

  DATA("RW","PMrk",XX,"BAS") $ (SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),  DATA(RM,"Prod",XX,"BAS")))
    = SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),   DATA(RM,"PMrk",XX,"BAS")*DATA(RM,"Prod",XX,"BAS"))
                                /SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),   DATA(RM,"Prod",XX,"BAS"));
*
*  --- if world price is still missing, use average of market prices (even if only taken from CAPRI data),
*      next based on imports
*
  DATA("RW","PMrk",XX,"BAS") $ ((NOT DATA("RW","PMrk",XX,"BAS")) and SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),  DATA(RM,"IMPT",XX,"BAS")))
    = SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),   DATA(RM,"PMrk",XX,"BAS")*DATA(RM,"IMPT",XX,"BAS"))
                                /SUM(RM $ DATA(RM,"PMrk",XX,"BAS"),   DATA(RM,"IMPT",XX,"BAS"));


  p_transpCost(RM,RM1,XX,"Max") $ DATA("RW","PMrk",XX,"BAS") = MIN(p_transpCost(RM,RM1,XX,"Max"),DATA("RW","PMrk",XX,"BAS") *0.5);
  p_transpCost(RM,RM1,XX,"Min") $ DATA("RW","PMrk",XX,"BAS") = MAX(p_transpCost(RM,RM1,XX,"Min"),DATA("RW","PMrk",XX,"BAS") *0.05);

  p_transpCost(RM,RM1,XX,"Max") = MAX(p_transpCost(RM,RM1,XX,"Max"),p_transpCost(RM,RM1,XX,"Min")*1.5);


  v_transpCost.LO(RM,RM1,XX) = MIN(p_transpCost(RM,RM1,XX,"Min"),p_transpCost(RM,RM1,XX,"Max")*0.50);
  v_transpCost.UP(RM,RM1,XX) = MAX(p_transpCost(RM,RM1,XX,"Min")*2.50,p_transpCost(RM,RM1,XX,"Max"));
  v_transpCost.L (RM,RM1,XX) = p_transpCost(RM,RM1,XX,"Mean");
  v_transpCost.FX(RM,RM,XX) = 0;


*pw --- Fall back for missing PMRK in RM regions is the world price
  DATA(RM,"PMrk",XX,"BAS") $ (NOT DATA(RM,"PMrk",XX,"BAS"))
   = DATA("RW","PMrk",XX,"BAS");


$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 10price3 DATA


*
*
* ### block sugar price estimation [for BAS]
*


*
*  --- Include sugar prices from blume et al (2003) and extrapolate to time series
*pw    NOTE: This was assigned further above in an earlier version,
*            but then the outlier filter removes the EU sugar prices again => moved to this place
*
$include 'sugar\price_est.gms'

*      EU27 prices for sugar in base year

 DATA(RMS,"PMRK","SUGA","BAS") $ MAP_RR("EU027000",RMS) = EUPRIC(RMS,"AV","20%BAS%");
*pw Cannot work, as EUPRIC(EUaggs,...) is empty:
* DATA(RMALL,"PMRK","SUGA","BAS") $ MAP_RR("EU027000",RMALL)= EUPRIC(RMALL,"AV","20%BAS%");
  DATA(RMAGG,"PMrk","SUGA","BAS") $ (MAP_RR("EU027000",RMagg) and SUM(RMS_TO_RM(RMSSUP,RMAGG),DATA(RMSSUP,"MAPR","SUGA","BAS")))
    = SUM(RMS_TO_RM(RMSSUP,RMAGG), DATA(RMSSUP,"PMRK","SUGA","BAS")*DATA(RMSSUP,"MAPR","SUGA","BAS"))
    / SUM(RMS_TO_RM(RMSSUP,RMAGG),                                  DATA(RMSSUP,"MAPR","SUGA","BAS"));

*      Prices for sugar in base year in other Europe
*      Note: Currently these are coming from the FOB prices which may be pretty random
*            => We impose some plausible values

*      BUR and WBA had already price or political linkages to the high price region EU:
*mih: if RW is very different from EUPRIC for BG and RO this can result in very different figures for the aggregate BUR and its single countries
*  DATA("BUR","PMrk","SUGA","BAS") = DATA("RW","PMrk","SUGA","BAS")+150.;
  DATA("WBA","PMrk","SUGA","BAS") = DATA("RW","PMrk","SUGA","BAS")+150.;

*      TUR and NO may be closer to the world market price (about 250 Euros) :
  DATA("TUR","PMrk","SUGA","BAS") = DATA("RW","PMrk","SUGA","BAS")+50.;
  DATA("NO000000","PMrk","SUGA","BAS") = DATA("RW","PMrk","SUGA","BAS")+50;

*
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 11pricesug DATA




* ### block prices, outlier removal [for BAS]

*
*  --- remove outliers from market prices
*
  DATA(RM,"PMrk",XX,"BAS") $ (not sameas(XX, "SUGA"))
   = MAX(0.5*DATA("RW","PMrk",XX,"BAS"),DATA(RM,"PMrk",XX,"BAS"));
*
  DATA(RM,"PMrk",XX,"BAS") $ ( (NOT SAMEAS(RM,"NO000000")) and (NOT SAMEAS(RM,"JAP")) and (NOT SAMEAS(RM,"CH")) and (NOT SAMEAS(RM,"EU015000")))
   = MIN(2.0*DATA("RW","PMrk",XX,"BAS"),DATA(RM,"PMrk",XX,"BAS"));

$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 12priceout DATA

*
$include '..\dat\arm\prod_price_ch.gms'



*
* --------------------------------------------------------------------------------------------------
*
*      ASSIGN YEARLY CHANGE FACTORS FOR PRICES
*
* --------------------------------------------------------------------------------------------------
*





*
*  --------------------- world market price developments ------------------------------------------
*
*  p_stdDevWorldMrkPrices is used later on to calcualte probabilites that the market price undercats the administrataive prices (eq. probMarketPriceUnderSafetyNet_)
*
*
   SET WorYear / 1960*1999,2000*2015 /;
*
$include '..\dat\arm\worPrices.gms';
*
   p_worldPrices(WorYear,"BEEF") = p_worldPrices(WorYear,"BEEF") * 10;
   p_worldPrices(WorYear,"SUGA") = p_worldPrices(WorYear,"SUGA") * 10;

*
*  ---- standard deviation of world market prices against linear trend line for 1990-2000
*
   SET YVAR / 1990*2000 /;
   PARAMETER P_stdDevWorldMrkPrices,p_olsNobs,p_olsSumY,p_olsSumX,p_olsSumXX,p_olsSumYY,p_olsSumXY,p_olsSumX,p_olsSumY,p_olsX1,p_olsX2,p_olsSlope,P_oldConst;
*
   p_olsNobs = CARD(YVAR);
   p_olsSumXX     = SUM(YVAR, ORD(YVAR)*ORD(YVAR));
   p_olsSumX      = SUM(YVAR, Ord(YVAR));
   p_olsSumYY(XX) = SUM(YVAR, p_worldPrices(YVAR,XX)*p_worldPrices(YVAR,XX)/(p_dollarPerEuro(YVAR)*p_dollarPerEuro(YVAR)));
   p_olsSumY(XX)  = SUM(YVAR, p_worldPrices(YVAR,XX)/p_dollarPerEuro(YVAR));
   p_olsSumXY(XX) = SUM(YVAR, ORD(YVAR)*p_worldPrices(YVAR,XX)/p_dollarPerEuro(YVAR));
*
   p_olsX1(XX) = (p_olsSumXY(XX) - p_olsSumX*p_olsSumY(XX)/p_olsNobs) $ p_olsNobs;
   p_olsX2(XX) = (p_olsSumXX     - p_olsSumX*p_olsSumX    /p_olsNobs) $ p_olsNobs;
*
   p_olsSlope(XX) = (p_olsX1(XX)/p_olsX2(XX)) $ (p_olsX2(XX) and p_olsNobs);
   P_oldConst(XX) = (p_olsSumY(XX)/p_olsNobs - p_olsSumX/p_olsNobs * p_olsSlope(XX)) $ p_olsNobs;
*
   P_stdDevWorldMrkPrices(XX) = SUM( YVAR, p_worldPrices(YVAR,XX)/p_dollarPerEuro(YVAR) - P_oldConst(XX) - p_olsSlope(XX)*Ord(YVAR))/CARD(YVAR);
*
   P_stdDevWorldMrkPrices(XX) $ P_stdDevWorldMrkPrices(XX) = SQRT(  1/(CARD(YVAR)-1) * SUM( YVAR, SQR(p_worldPrices(YVAR,XX)/p_dollarPerEuro(YVAR)-P_oldConst(XX)-p_olsSlope(XX)*Ord(YVAR)-P_stdDevWorldMrkPrices(XX))));
*

   P_stdDevWorldMrkPrices("BUTT") = P_stdDevWorldMrkPrices("BEEF") * 2. / (p_olsSumY("BEEF")/p_olsNobs) * DATA("ANZ","Pmrk","BUTT","BAS");
   P_stdDevWorldMrkPrices("SMIP") = P_stdDevWorldMrkPrices("BEEF") * 2. / (p_olsSumY("BEEF")/p_olsNobs) * DATA("ANZ","Pmrk","SMIP","BAS");
   P_stdDevWorldMrkPrices("SMIP") = P_stdDevWorldMrkPrices("BEEF") * 3. / (p_olsSumY("BEEF")/p_olsNobs) * DATA("ANZ","Pmrk","SMIP","BAS");
   P_stdDevWorldMrkPrices("CHES") = P_stdDevWorldMrkPrices("BEEF") * 2. / (p_olsSumY("BEEF")/p_olsNobs) * DATA("ANZ","Pmrk","CHES","BAS");
   P_stdDevWorldMrkPrices("PORK") = P_stdDevWorldMrkPrices("BEEF") * 2. / (p_olsSumY("BEEF")/p_olsNobs) * DATA("USA","Pmrk","PORK","BAS");
   P_stdDevWorldMrkPrices("POUM") = P_stdDevWorldMrkPrices("BEEF") * 2. / (p_olsSumY("BEEF")/p_olsNobs) * DATA("USA","Pmrk","POUM","BAS");
   P_stdDevWorldMrkPrices("BARL") = P_stdDevWorldMrkPrices("WHEA")      / (p_olsSumY("WHEA")/p_olsNobs) * DATA("USA","Pmrk","BARL","BAS");
   P_stdDevWorldMrkPrices("RYEM") = P_stdDevWorldMrkPrices("WHEA")      / (p_olsSumY("WHEA")/p_olsNobs) * DATA("USA","Pmrk","BARL","BAS");
   P_stdDevWorldMrkPrices("OATS") = P_stdDevWorldMrkPrices("WHEA")      / (p_olsSumY("WHEA")/p_olsNobs) * DATA("USA","Pmrk","BARL","BAS");
   P_stdDevWorldMrkPrices("OCER") = P_stdDevWorldMrkPrices("WHEA")      / (p_olsSumY("WHEA")/p_olsNobs) * DATA("USA","Pmrk","OCER","BAS");
*
   P_stdDevWorldMrkPrices(MARR) $ SUM(CAP_TO_TRD(MARR,XX) $ P_stdDevWorldMrkPrices(XX), 1.)
     = SUM(CAP_TO_TRD(MARR,XX), P_stdDevWorldMrkPrices(XX))/SUM(CAP_TO_TRD(MARR,XX) $ P_stdDevWorldMrkPrices(XX), 1.);
*
   option kill=p_olsNobs;
   option kill=p_olsSumY;
   option kill=p_olsSumY;
   option kill=p_olsSumXX;
   option kill=p_olsSumYY;
   option kill=p_olsSumXY;
   option kill=p_olsX1;
   option kill=p_olsX2;
   option kill=p_olsSlope;
   option kill=P_oldConst;

*
*
* growth rates are initialized by fapri --> see starting values of the block grate aglinkUvag

   PARAMETER p_growthRateMarketModelPos(RAll,*,*) "Growth FACTORS (not rates) for market model positions";
*
* --- !!! note that the order of variables in p_growthRateMarketModelPos is ROWS(e.g. MAIZ), COLS(e.g. PMRK) !!!
*         [exactly the opposite of what we use in the DATA parameter...]

*
*  --- use growth rate of market prices from FAPRI where still missing
*
   p_growthRateMarketModelPos(RM,XX,"PMrk") $ sum( LstFAPRI, (p_fapriData(RM,"PMrk",XX,"20%BAS%") and p_fapriData(RM,"PMrk",XX,LstFAPRI)))
      =  sum( LstFAPRI,
         (p_fapriData(RM,"PMrk",XX,LstFAPRI) / p_fapriData(RM,"PMrk",XX,"20%BAS%"))**(1./(sum(simyy $ LstFAPRI(simyy), simyy.val) - CALYEA("20%BAS%"))));




* ### block: growth rates, aglink uvag
*
*  --- overwrite with growth rates from AGLINK
*
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_gRateDataPrep 1init p_growthRateMarketModelPos

   PARAMETER p_AglinkUVAG(*,*,*);

$IF NOT EXIST %results_in%\baseline\Aglink_for_capmod.gdx $ABORT "%results_in%\baseline\Aglink_for_capmod.gdx" does not exist, in %system.fn%, line %system.incline%
   execute_load "%results_in%\baseline\Aglink_for_capmod.gdx",p_AglinkUVAG;


*   Copy prices from Eu12 to EU10 and BUR
   rowsToMap(XX) = yes;
  rowsToMap(XXBIOF) = NO;

   p_AglinkUVAG("EU012000",Rows,s_to_read_Aglink) $ (NOT p_AglinkUVAG("EU012000",Rows,s_to_read_Aglink))
   = p_AglinkUVAG("EU015000",Rows,s_to_read_Aglink);

   p_AglinkUVAG("EU015000",Rows,s_to_read_Aglink) $ (NOT p_AglinkUVAG("EU015000",Rows,s_to_read_Aglink))
   = p_AglinkUVAG("EU012000",Rows,s_to_read_Aglink);

   p_AglinkUVAG("EU010000",Rows,s_to_read_Aglink) = p_AglinkUVAG("EU012000",Rows,s_to_read_Aglink);
   p_AglinkUVAG("BUR",Rows,s_to_read_Aglink)      = p_AglinkUVAG("EU012000",Rows,s_to_read_Aglink);

   p_AglinkUVAG(EU27AGGS,"OCER","index_per_yr") $ (NOT p_AglinkUVAG(EU27AGGS,"OCER","index_per_yr")) =p_AglinkUVAG(EU27AGGS,"Barl","index_per_yr");
   p_AglinkUVAG(EU27AGGS,"PLMO","index_per_yr") $ (NOT p_AglinkUVAG(EU27AGGS,"PLMO","index_per_yr")) =p_AglinkUVAG(EU27AGGS,"RAPO","index_per_yr");


   p_growthRateMarketModelPos(EU27AGGS,rowsToMap,"PMRK") = p_AglinkUVAG(EU27AGGS,rowsToMap,"index_per_yr");
** Aglink only uses one kind of wheat
   p_growthRateMarketModelPos(EU27AGGS,"WHEA","PMRK")    =   (p_AglinkUVAG(EU27AGGS,"SWHE","index_per_yr"));

   p_growthRateMarketModelPos(EU27AGGS,"RICE","PMRK") = p_AglinkUVAG(EU27AGGS,"PARI","index_per_yr");

   OPTION KILL = s_to_read_AGLINK;
   OPTION KILL = p_aglinkUVAG;

$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_gRateDataPrep 13grateaglink p_growthRateMarketModelPos



* ### block sugar trend values


*  --- Sugar: RMSSUP.UVAG.SUGA have been set to 404.4 Euro/ton in captrd\expert_support.gms (at least up to april 2011)
*             This is a reasonable estimate (= reference price as of 2009/10 from revised sugar CMO) but it does not reflect the markup
*             of sugar prices that was also observed in the old CMO where PMRK ~ 700 Euro > 631 Euro = Intervention price.
*             It may be even expected that PMRK ends up higher relative to PADM, if high value added uses (in food industry) stabilise prices.
*             => Introduce an slightly increased margin over the intervention price when assigning PMRK.SUGA.TRD

*             This price will not only hold in parts of EU27 but also in WBA which may be expected to link to the EU market
*
   data(rmssup,"pmrk","suga","trd") $ (NOT (SAMEAS(RMSSUP,"NO000000") or SAMEAS(RMSSUP,"TUR")) )
       = 1.15 * DATA("EU015000","PADM","SUGA","2009") ;

*      For Turkey use sugar beet prices which have been projected more or less reasonably in CAPTRD using a 10% markup...
  DATA("TUR","pmrk","SUGA","trd") $ (DATA("TUR","MAPR","SUGA","trd") )
       = 1.1 * DATA("TUR","UVAG","SUGB","trd")
       * DATA("TUR","PRCM","SUGB","TRD") / DATA("TUR","MAPR","SUGA","TRD");

*  --- Beets: Avg beet prices have been set to about 27.5 Euro/ton (= minimum price + 1 euro molasse payment) in CAPTRD.
*             But this is the MINIMUM price from the regulation, applicable to quota and contracted industrial sugar
*             => Prices for quota beet are often higher, prices for over quota beets are often lower, see (on 270411)
*             http://www.liz-online.de/gi/bw/ruebenpreise1.htm
*             http://www.topagrar.com/news/Home-top-News-Neue-Ruebenpreise-bei-Suedzucker-inkl-Erschwerniszulage-131117.html
*             http://www.agrarheute.com/zuckerpreise
*
*             => we set: UVAGa=UVAGb = aggregate estimate from change in sugar prices and
*                        UVAGc = 20 Euros (somewhat lower than minimum from regulation to get a clear kink in marginal revenues)
*
*             Weights for average prices are A,B,C sugar production on MS level
   DATA(RMSSUP,"GROF","SUGBa","BAS") $ MAP_RR("EU027000",RMSsup)
       = MIN(DATA(RMSSUP,"GROF","SUGB","BAS"), DATA(RMSSUP,"QUTA","SUGB","BAS"));
   DATA(RMSSUP,"GROF","SUGBb","BAS") $ MAP_RR("EU027000",RMSsup)
       = MAX(0,MIN(DATA(RMSSUP,"GROF","SUGB","BAS")-DATA(RMSSUP,"QUTA","SUGB","BAS"), DATA(RMSSUP,"QUTB","SUGB","BAS")));
   DATA(RMSSUP,"GROF","SUGBc","BAS") $ MAP_RR("EU027000",RMSsup)
       = MAX(0,DATA(RMSSUP,"GROF","SUGB","BAS")-DATA(RMSSUP,"QUTS","SUGB","BAS"));
   DATA(RMSSUP,"GROF","SUGBa","TRD") $ MAP_RR("EU027000",RMSsup)
       = MIN(DATA(RMSSUP,"GROF","SUGB","TRD"), DATA(RMSSUP,"QUTA","SUGB","CAL"));
   DATA(RMSSUP,"GROF","SUGBb","TRD") $ MAP_RR("EU027000",RMSsup)
       = MAX(0,MIN(DATA(RMSSUP,"GROF","SUGB","TRD")-DATA(RMSSUP,"QUTA","SUGB","CAL"), DATA(RMSSUP,"QUTB","SUGB","CAL")));
   DATA(RMSSUP,"GROF","SUGBc","TRD") $ MAP_RR("EU027000",RMSsup)
       = MAX(0,DATA(RMSSUP,"GROF","SUGB","TRD")-DATA(RMSSUP,"QUTS","SUGB","CAL"));
*
*      -- Now assign uvagABC for EU27 as explained above:

   data(rmssup,"uvagc","sugb","trd") $ MAP_RR("EU027000",RMSsup)
       = 20;
*
*
*         Case 1: Average beet price is unknown (after 2010)

*         => Average of extrapolated A+B prices is assigned to A (no distinction of A+B after the reform):
   data(rmssup,"uvaga","sugb","trd")  $ (     MAP_RR("EU027000",RMSsup)
                                         and  (CALYEA("%SIMY%") GT CALYEA("2010")))
       = MAX((  (  data(rmssup,"uvaga","sugb","bas") * data(rmssup,"grof","sugba","bas")
                 + data(rmssup,"uvagb","sugb","bas") * data(rmssup,"grof","sugbb","bas") )
               /(  data(rmssup,"grof","sugba","bas") + data(rmssup,"grof","sugbb","bas") )
*             change factor from sugar is applied to quota beets as well:
                 *data(rmssup,"pmrk","suga","trd")/data(rmssup,"pmrk","suga","bas"))
               $ (   (data(rmssup,"grof","sugba","bas") + data(rmssup,"grof","sugbb","bas") )
                  and data(rmssup,"pmrk","suga","bas") ) ,
*            The following has been set basically to the minimum price from Sugar regulation R318/2006 in CAPTRD:
             data(rmssup,"uvag","sugb","trd")*1.2);

*         Case 2: Average beet price is known from COCO (up to year 2010)

   data(rmssup,"uvaga","sugb","trd")  $ (     MAP_RR("EU027000",RMSsup)
                                         and  (CALYEA("%SIMY%") LE CALYEA("2010"))
                                         and  (  data(rmssup,"grof","sugba","trd")
                                               + data(rmssup,"grof","sugbb","trd") ))
       =MIN(MAX( (   data(rmssup,"uvag","sugb","trd")*data(rmssup,"grof","sugb","trd")
                   - data(rmssup,"uvagc","sugb","trd")*data(rmssup,"grof","sugbc","trd"))
                /(  data(rmssup,"grof","sugba","trd") + data(rmssup,"grof","sugbb","trd") ), 0),
            data(rmssup,"uvag","sugb","trd")*1.5)
                ;

*         Just for completeness also assign B prices:
   data(rmssup,"uvagb","sugb","trd")  $ MAP_RR("EU027000",RMSsup)
       = data(rmssup,"uvaga","sugb","trd")  ;

*         Average beet price:
   data(rmssup,"uvag","sugb","trd")  $ (     MAP_RR("EU027000",RMSsup)
                                        and (data(rmssup,"grof","sugb","trd") GT 1.E-3))

*          Quota prices are weighted with non-industrial sugar production:
       =(  data(rmssup,"uvaga","sugb","trd")
         * (data(rmssup,"grof","sugba","trd")+ data(rmssup,"grof","sugbb","trd"))

*         Over quota prices (= C prices) are weighted with industrial sugar production:
         + data(rmssup,"uvagc","sugb","trd")
         * data(rmssup,"grof","sugbc","trd"))
       / data(rmssup,"grof","sugb","trd") ;


*     -- Finally take over the data for MS27 and other RMSSUP for TRD

   rowsToMap(XX) = NO;

   rowsToMap("SUGB") = YES;
   data(rmssup,"ppri",rowstomap,"trd") = data(rmssup,"uvag",rowstomap,"trd");

   rowsToMap("SUGA") = YES;
   data(RM,"pmrk",rowstomap,"trd") $ (    sum(map_rr(RM,ms), data(ms,"mapr",rowstomap,"trd")+data(ms,"domm",rowstomap,"trd"))
*                                         Norway should follow the GRate
                                      and (NOT SAMEAS(RM,"NO000000") )        )
     = SUM(map_rr(RM,ms), (data(ms,"mapr",rowstomap,"trd")+data(ms,"domm",rowstomap,"trd"))*data(ms,"pmrk",rowstomap,"trd"))
                                     / SUM(map_rr(RM,ms), data(ms,"mapr",rowstomap,"trd")+data(ms,"domm",rowstomap,"trd"));

*        Remove market prices for single countries that were just assigned to define the aggregates
   DATA(RMSSUP,"PMrk",Rowstomap,"TRD") $ SUM(RMS_TO_RM(RMSSUP,RMAGG) $ (NOT SAMEAS(RMSSUP,RMAGG)), 1. ) = 0;
   DATA(RMSSUP,"PMrk",Rowstomap,"BAS") $ SUM(RMS_TO_RM(RMSSUP,RMAGG) $ (NOT SAMEAS(RMSSUP,RMAGG)), 1. ) = 0;

*     ... for market prices
   rowsToMap("MOLA") = YES;
*
   p_growthRateMarketModelPos(RMSSUP,rowsToMap,"ppri") $ (DATA(RMSSUP,"ppri",rowsToMap,"TRD") AND DATA(RMSSUP,"ppri",rowsToMap,"BAS"))
                                  = (DATA(RMSSUP,"ppri",rowsToMap,"TRD") / DATA(RMSSUP,"ppri",rowsToMap,"BAS"))**(1./(CALYEA("TRD")-CALYEA("BAS")));

   p_growthRateMarketModelPos(RM,rowsToMap,"pmrk") $ (     DATA(RM,"pmrk",rowsToMap,"TRD") AND DATA(RM,"pmrk",rowsToMap,"BAS")
                                  and (Map_RR("EU027000",RM) or SAMEAS(RM,"TUR") or SAMEAS(RM,"WBA") ))
                                  = (DATA(RM,"pmrk",rowsToMap,"TRD") / DATA(RM,"pmrk",rowsToMap,"BAS"))**(1./(CALYEA("TRD")-CALYEA("BAS")));
*
*        This prevents further unintended use of rowsToMap
   rowsToMap(XX) = NO;

$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_gRateDataPrep 14sugatrend p_growthRateMarketModelPos
$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataPrep 14sugatrend DATA






* ### block growth rate, filling up missing values   (longrun projection results for years after 2020)
*
*
*  --- if a growth rate is still missing, use growth rate of market prices from FAPRI from all countries were given, weighted with production
*
   p_growthRateMarketModelPos(RM,XX,"PMrk") $ ((NOT p_growthRateMarketModelPos(RM,XX,"Pmrk")) and SUM(RM1, p_growthRateMarketModelPos(RM1,XX,"PMrk")*DATA(RM1,"Prod",XX,"BAS")))
      = SUM(RM1, p_growthRateMarketModelPos(RM1,XX,"PMrk") * DATA(RM1,"Prod",XX,"BAS"))/SUM(RM1 $ (p_growthRateMarketModelPos(RM1,XX,"PMrk")*DATA(RM1,"Prod",XX,"BAS")), DATA(RM1,"Prod",XX,"BAS"));
*
*  --- if still missing, use projections of world bank
*
   p_growthRateMarketModelPos(RM,XX,"PMrk")     $ ((NOT p_growthRateMarketModelPos(RM,XX,"PMRK")) and p_worldPrices("2000",XX))
       = (p_worldPrices("2010",XX) / p_worldPrices("2000",XX))**(1./(2010-2000));
   p_growthRateMarketModelPos("EU015000","SUGA","PMrk") $ (EUPRIC("EU015000","AV","20%BAS%") and (%BAS% ne %SIM%))
       = (EUPRIC("EU015000","AV","20%SIM%") / EUPRIC("EU015000","AV","20%BAS%"))**(1./(20%SIM%-20%BAS%));
*
*  ---- WB: why????
*       PW: Good question! Would be worthwhile to figure out who was the author:
*
   p_growthRateMarketModelPos(RM,"PULS","PMrk") $ (NOT p_growthRateMarketModelPos(RM,"PULS","PMrk"))
      = p_growthRateMarketModelPos(RM,"WHEA","PMrk");

*  EU inflation rate is applied to remaining products (Sep. 08: TEXT,TOMA,OVEG,APPL,OFRU,TAGR,TABO,TWIN,OLIO,DDGS,FPRI,FENI)
   p_growthRateMarketModelPos(RM,XX,"PMrk")  $ ((NOT p_growthRateMarketModelPos(RM,XX,"PMrk")) and (NOT MLK(XX))) = p_infl;


   option kill=RMT;
   RMT(RM)      = YES;
   RMT(EUAGGS)  = NO;
   RMT("BUR")   = NO;


*  --- include longer-term projections from external sources (prepared by global.gms)
*
$IF NOT EXIST "%results_in%\global\longrun_info_fac.gdx" $ABORT "%results_in%\global\longrun_info_fac.gdx" is missing, in %system.fn%, line %system.incline%      
  execute_load "%results_in%\global\longrun_info_fac.gdx",p_longRunInfoAll;

*  --- Copy to smaller parameter and move crop LEVL to column

   p_longrunInfo(RMall,cols,rows,info,longYr) $ ((NOT SAMEAS(ROWS,"LEVL")) OR macro(COLS))
     = p_longRunInfoAll(RMall,cols,rows,info,"%SelecScen%",longYr) ;

   p_longrunInfo(RMall,"LEVL",XX_CROPS,info,longYr) $ sum(pact_to_y(MCACT,O) $ cap_to_trd(O,XX_CROPS),1)
     = sum(pact_to_y(MCACT,O) $ cap_to_trd(O,XX_CROPS), p_longRunInfoAll(RMall,MCACT,O,info,"%SelecScen%",longYr)) ;

   OPTION KILL = p_longRunInfoAll;

*  --- Compute an expost index of world price changes from year 2000 to BAS using FAPRI or the old default info
*      because the long run sources are expressed relative to year 2000
*      NOTE: Often the longrun source may offer regional prices as well. => Using only the world price and only for 2050
*            discards most price information but is also a safe strategy.
*
   p_longRunInfo("WORLD","UVAP",XX,"factorB2000","20%BAS%")
      $   SUM(RM $ (p_fapriData(RM,"PMrk",XX,"20%BAS%") $ p_fapriData(RM,"PMrk",XX,"2000")),p_fapriData(RM,"PMrk",XX,"2000"))
*        Typically PMRK is only given for 1-2 representative market regions
      =   SUM(RM $ (p_fapriData(RM,"PMrk",XX,"20%BAS%") $ p_fapriData(RM,"PMrk",XX,"2000")),p_fapriData(RM,"PMrk",XX,"20%BAS%"))
      /   SUM(RM $ (p_fapriData(RM,"PMrk",XX,"20%BAS%") $ p_fapriData(RM,"PMrk",XX,"2000")),p_fapriData(RM,"PMrk",XX,"2000"));


   p_longRunInfo("WORLD","UVAP",XX,"factorB2000","20%BAS%")
      $ ((NOT   p_longRunInfo("WORLD","UVAP",XX,"factorB2000","20%BAS%"))
         $ SUM(longYr, p_longRunInfo("WORLD","UVAP",XX,"factorB2000",longYr)))
      =  (p_worldPrices("20%BAS%",XX) / p_worldPrices("2000",XX)) $      (p_worldPrices("2000",XX) $ p_worldPrices("20%BAS%",XX))
*     better having no correction (=> factor = 1) than loosing the information altogether
      +  1                                                        $ (NOT (p_worldPrices("2000",XX) $ p_worldPrices("20%BAS%",XX)));


*  --- For evolution after 2020 form a weighted average with changes from long run souce (if data are existing)

   p_growthRateMarketModelPos(RMALL,XX,"PMRK") $ ((CALYEA("Y") GT CALYEA("2020")) and p_growthRateMarketModelPos(RMALL,XX,"PMRK")
*                            If longrun projections are missing: maintain p_growthRateMarketModelPos from above
                            and p_longRunInfo("WORLD","UVAP",XX,"factorB2000","2050"))
      =    ((CALYEA("2050")-CALYEA("Y"))/(CALYEA("2050")-CALYEA("2020")))
         * p_growthRateMarketModelPos(RMALL,XX,"PMRK")

      +    (1.-(CALYEA("2050")-CALYEA("Y"))/(CALYEA("2050")-CALYEA("2020")))
*            Note that p_longRunInfoAll was initialised = 1 as a fall back option
         * ( p_longRunInfo("WORLD","UVAP",XX,"factorB2000","2050")
            /p_longRunInfo("WORLD","UVAP",XX,"factorB2000","20%BAS%"))
          **(1./(CALYEA("2050")-CALYEA("2000")))
*            Longrun prices were expressed as real price changes and need to be inflated in GLOBIOM projections
$ifi not %SelecScen% == faoIfpri2009 * p_infl
         ;

$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_gRateDataPrep 15gratefillup p_growthRateMarketModelPos




* ### block growht rate, macro and population
*
* --------------------------------------------------------------------------------------------------
*
*      ASSIGN YEARLY CHANGE FACTORS FOR GDP AND POPULATION
*
* --------------------------------------------------------------------------------------------------
*
*
*
*  --- Population and real GDP (and expenditure) growth should be taken over from the main expert sources for CAPTRD
*      in the technical baseline (Currently AGLINK until 2020 and FAO/IFPRI after 2020).
*      For a particular project, modified macro assumptions might be required in the baseline, giving modified demand growth.
*      This can be implemented in an auxiliary simulation that modifies the initial (technical) baseline.
*

*  --- error check macro data

   option kill=RMT;
   RMT(RM)      = YES;
   RMT(RMS)      = YES;

   If(sum((RMT,macro) $ (   (NOT p_dataMarket(RMT,macro,"LEVL","gRate"))
                        or (NOT SUM(longYr, p_longRunInfo(RMT,macro,"LEVL","factorB2000",longYr)))),1),

       RUNR(RALL) = NO;
       RUNR(RMT) $ (NOT p_dataMarket(RMT,"INHA","LEVL","gRate")) = YES;
       DISPLAY "Population p_growthRateMarketModelPos from AGLINK is missing for the following regions: ", RUNR;

       RUNR(RALL) = NO;
       RUNR(RMT) $ (NOT p_dataMarket(RMT,"GDP","LEVL","gRate")) = YES;
       DISPLAY "GDP p_growthRateMarketModelPos from AGLINK is missing for the following regions: ", RUNR;

       RUNR(RALL) = NO;
       RUNR(RMT) $ (NOT SUM(longYr, p_longRunInfo(RMT,"INHA","LEVL","factorB2000",longYr))) = YES;
       DISPLAY "Population factor from longrun source is missing for the following regions: ", RUNR;

       RUNR(RALL) = NO;
       RUNR(RMT) $ (NOT SUM(longYr, p_longRunInfo(RMT,"GDP","LEVL","factorB2000",longYr)))  = YES;
       DISPLAY "GDP factor from longrun source is missing for the following regions: ", RUNR;

       Display "Error in data_prep.gms. Some macro p_growthRateMarketModelPoss/factors missing.";
*     ,p_dataMarket,p_F2050Impact;
   );


*  --- GDP is given in real terms: inflate for GLOBIOM

$iftheni not %SelecScen% == faoIfpri2009
   p_longRunInfo(RMT,"GDP","LEVL","factorB2000",longyr)
     = p_longRunInfo(RMT,"GDP","LEVL","factorB2000",longyr) * p_infl**(CALYEA(longYr)-CALYEA("2000"));
$endif
*
*      Fall back option if only the factor 2000->BAS is missing
   p_longRunInfo(RMT,macro,"LEVL","factorB2000","20%BAS%") $ (NOT p_longRunInfo(RMT,macro,"LEVL","factorB2000","20%BAS%"))
     = 1;

*  --- pick the factors closest to Y:

   LOOP(longYr $  ((CALYEA("Y") GT CALYEA("2020")) and (CALYEA(longYr) GE CALYEA("BAS"))),

      SIMYYY(simyy) = no;
      SIMYYY(simyy) $ ( (CALYEA("Y") EQ CALYEA(simyy))
                      $ (CALYEA(simyy) LE CALYEA(longYr+1))
                      $ (CALYEA(simyy) GT CALYEA(longYr)) ) = yes;

      p_longRunInfo(RMT,cols,rows,"factorB2000",SIMYYY)
      =  p_longRunInfo(RMT,cols,rows,"factorB2000",longYr)
      +  (CALYEA(SIMYYY) - CALYEA(longYr))
      *  (p_longRunInfo(RMT,cols,rows,"factorB2000",longYr+1) - p_longRunInfo(RMT,cols,rows,"factorB2000",longYr))
      /  (CALYEA(longYr+1) - CALYEA(longYr));

      p_longRunInfo(RMT,cols,rows,"factorB2000","Y")  $ CARD(SIMYYY)
         = SUM(SIMYYY,p_longRunInfo(RMT,cols,rows,"factorB2000",SIMYYY));
   );
   p_longRunInfo(RMT,cols,rows,"factorB2000","Y") $  (CALYEA("Y") EQ CALYEA("BAS"))
         = p_longRunInfo(RMT,cols,rows,"factorB2000","20%BAS%");

*
*  --- merge/extrapolate AGLINK if beyond 2020

   If(   (CALYEA("Y") GT CALYEA("2020")),

*      -- form a weighted average with AGLINK between 2020 and 2030 (=> smooth transition from AGLINK to longrun)
*
       If( (CALYEA("Y") LE CALYEA("2030")),

*         First make sure that we have some factor if p_dataMarket is empty
          p_growthRateMarketModelPos(RMT,macro,"LEVL")
              = ( p_longRunInfo(RMT,macro,"LEVL","factorB2000","2030")
*                 also assigned in global\convert_globiom.gms:
                 /p_longRunInfo(RMT,macro,"LEVL","factorB2000","20%BAS%"))
              **(1./(CALYEA("2030")-CALYEA("BAS")));

*         Then take average with AGLINK info up to 2020, weighted with distance to 2020/2030
          p_growthRateMarketModelPos(RMT,macro,"LEVL") $ (  p_longRunInfo(RMT,macro,"LEVL","factorB2000","2030")
                                                          $ p_dataMarket(RMT,Macro,"LEVL","gRate"))
             =    ((CALYEA("2030")-CALYEA("Y"))/(CALYEA("2030")-CALYEA("2020")))
                * p_dataMarket(RMT,Macro,"LEVL","gRate")
             +    (1.-(CALYEA("2030")-CALYEA("Y"))/(CALYEA("2030")-CALYEA("2020")))
                * (p_longRunInfo(RMT,macro,"LEVL","factorB2000","2030")
*                 also assigned in global\convert_globiom.gms:
                  /p_longRunInfo(RMT,macro,"LEVL","factorB2000","20%BAS%"))
                **(1./(CALYEA("2030")-CALYEA("BAS")));

       else

*      -- fully adopt long run info beyond 2030

          p_growthRateMarketModelPos(RMT,macro,"LEVL")
              = ( p_longRunInfo(RMT,macro,"LEVL","factorB2000","Y")
*                 also assigned in global\convert_globiom.gms:
                 /p_longRunInfo(RMT,macro,"LEVL","factorB2000","20%BAS%"))
              **(1./(CALYEA("Y")-CALYEA("BAS")));
       );
     );

*  --- For SimY up to 2020 we may directly apply the growth factor from AGLINK...
*
   p_growthRateMarketModelPos(RMT,Macro,"LEVL") $ (NOT p_growthRateMarketModelPos(RMT,Macro,"LEVL") )


*                                               ... but only if growth factors are disaggregated to RMSSUP, otherwise...
     = p_dataMarket(RMT,Macro,"LEVL","gRate")   $ (    (   (   p_dataMarket("PT000000","GDP","LEVL","gRate")
                                                            NE p_dataMarket("DE000000","GDP","LEVL","gRate"))
                                                        or (NOT NUTS0(RMT))))
*
*                                               ... take the macro info from long run source
     + [( p_longRunInfo(RMT,macro,"LEVL","factorB2000","Y")
         /p_longRunInfo(RMT,macro,"LEVL","factorB2000","20%BAS%"))
        **(1./(CALYEA("Y")-CALYEA("BAS")))]     $ (not (   (   p_dataMarket("PT000000","GDP","LEVL","gRate")
                                                            NE p_dataMarket("DE000000","GDP","LEVL","gRate"))
                                                        or (NOT NUTS0(RMT))))
     ;
*
*
*  --- Finally assign for any SIMY
*
   DATA(RMT,Macro,"LEVL","Y") = DATA(RMT,Macro,"LEVL","BAS") * p_growthRateMarketModelPos(RMT,Macro,"LEVL")**(CALYEA("Y")-CALYEA("BAS"));
*
*  --- if missing (should be impossible due to abort above): real GDP growth per cap at 1% + 1.9% inflation world wide ...
*
   p_growthRateMarketModelPos(RMS,"GDP","LEVL") $ (NOT p_growthRateMarketModelPos(RMS   ,"GDP","LEVL"))
      = (p_infl - 1) + p_growthRateMarketModelPos(RMS,"Inha","LEVL") + 0.01;
*
   p_growthRateMarketModelPos(RMT ,"INCE","LEVL")  = p_growthRateMarketModelPos(RMT ,"GDP","LEVL")   ;
*

$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_gRateDataPrep 16gratemacro p_growthRateMarketModelPos




* ### block growth rates, balances
* --------------------------------------------------------------------------------------------------
*
*      ASSIGN YEARLY CHANGE FACTORS FOR QUANTITIES
*
* --------------------------------------------------------------------------------------------------
*
   SET GPos(COLS) / Prod,Levl,Feed,Hcon,Proc,BioF /;



*  --- no change for all countries not covered by supply part if projection is missing
*
   p_growthRateMarketModelPos(RMS,XX,GPos) = 0 + 1 $ ( (NOT RMSSUP(RMS)) and DATA(RMS,GPOS,XX,"BAS"));



*   --- FAO_Y from above refers to 2020 or less
*       NOTE: This will change if AGLINK projects beyond 2020 => need to update this assignment!
$ifi %source_report% == ON $batinclude 'arm\debug_dataPrep.gms' p_gRateDataPrep before_at2030 p_growthRateMarketModelPos


   p_growthRateMarketModelPos(RMS,XX,GPos) $ (    (abs(DATA(RMS,GPOS,XX,"BAS")) gt 1.E-5) and (abs(DATA(RMS,GPos,XX,"FAO_Y")) gt 1.E-5)
                                            and (MIN(CALYEA("Y"),CALYEA("2020")) GT CALYEA("BAS")))
       = (DATA(RMS,GPos,XX,"FAO_Y")/DATA(RMS,GPOS,XX,"BAS"))**(1./(MIN(CALYEA("Y"),CALYEA("2020"))-CALYEA("BAS")));

*
*   --- check growth factors after AT2030 projections are taken over
*       Note: that these projections are copied to DATA(... "FAO_Y") from p_dataMarket many lines above
*             the relevant values are calculated directly in global.gms (from values on the time dimensions 2000_AT2030 and 2020_AT2030)
*             as a result that normally contains projected values in 2020
*
$ifi %source_report% == ON $batinclude 'arm\debug_dataPrep.gms' p_gRateDataPrep after_at2030 p_growthRateMarketModelPos




*
*
   DATA(RMS,GPos,XX,"FAO_Y") = 0;
*
*
*  --- same growth rates for all gPos of seeds and derived products
*
   p_growthRateMarketModelPos(RMS,SED,"Proc") = SUM( SED_TO_OIL(SED,OIL),p_growthRateMarketModelPos(RMS,OIL,"PROD"));
   p_growthRateMarketModelPos(RMS,CAK,"Prod") = SUM( SED_TO_CAK(SED,CAK),p_growthRateMarketModelPos(RMS,SED,"PROC"));
*
   p_growthRateMarketModelPos(RMS,CAK,GPos)      = p_growthRateMarketModelPos(RMS,CAK,"Prod");
   p_growthRateMarketModelPos(RMS,OIL,GPos)      = p_growthRateMarketModelPos(RMS,OIL,"Prod");
*
*
*  --- for evolution after 2020 extrapolate with long run info
*
*      -- first copy from DOMM to other demand components (no disagggregation from longrun available)

   p_longRunInfo(RMT,gpos,XX,"factorB2000",longYr) $ (NOT (SAMEAS(gpos,"LEVL") or SAMEAS(gpos,"PROD")))
      = p_longRunInfo(RMT,"DOMM",XX,"factorB2000",longYr);
   p_longRunInfo(RMT,gpos,XX,"factorB2000","Y") $ (NOT (SAMEAS(gpos,"LEVL") or SAMEAS(gpos,"PROD")))
      = p_longRunInfo(RMT,"DOMM",XX,"factorB2000","Y");
*
   If(   (CALYEA("Y") GT CALYEA("2020")),

*      -- form a weighted average with FAO/FAPRI/AGLINK between 2020 and 2030 (=> smooth transition to longrun)
*
       If( (CALYEA("Y") LE CALYEA("2030")),

*         Then take average with AGLINK info up to 2020, weighted with distance to 2020/2030
          p_growthRateMarketModelPos(RMS,XX,gpos) $ (  p_longRunInfo(RMS,gpos,XX,"factorB2000","2030")
                                                     $ p_longRunInfo(RMS,gpos,XX,"factorB2000","20%BAS%")
                                                     $ p_growthRateMarketModelPos(RMS,XX,gPos) )
             =    ((CALYEA("2030")-CALYEA("Y"))/(CALYEA("2030")-CALYEA("2020")))
                * p_growthRateMarketModelPos(RMS,XX,gPos)
             +    (1.-(CALYEA("2030")-CALYEA("Y"))/(CALYEA("2030")-CALYEA("2020")))
                * (p_longRunInfo(RMS,gpos,XX,"factorB2000","2030")
                  /p_longRunInfo(RMS,gpos,XX,"factorB2000","20%BAS%"))
                **(1./(CALYEA("2030")-CALYEA("BAS")));

       else

*      -- fully adopt long run info beyond 2030

          p_growthRateMarketModelPos(RMS,XX,gpos) $ (  p_longRunInfo(RMS,gpos,XX,"factorB2000","2030")
                                                     $ p_longRunInfo(RMS,gpos,XX,"factorB2000","20%BAS%"))
              =   (p_longRunInfo(RMS,gpos,XX,"factorB2000","Y")
                  /p_longRunInfo(RMS,gpos,XX,"factorB2000","20%BAS%"))
                **(1./(CALYEA("Y")-CALYEA("BAS")));
       );
     );

*
*  --- growth rates for CH come from own parameter p_changesCH in "dat\arm\
*
   p_growthRateMarketModelPos("CH",XX,COLS)
      = (p_changesCH(XX,COLS) **(1./(CALYEA("Y")-CALYEA("BAS")))) $ p_changesCH(XX,COLS)
       + 1.00 $ ((not p_changesCH(XX,COLS)) and GPos(COLS));


*
*  --- growth rate for EU MS, Norway, Bulgaria and Romaina according to results from CAPTRD (supplemented with BAS for PROD above)
*
   p_growthRateMarketModelPos(RMSSUP,ROWS,GPos) $ ( not (nonCocoRows(rows)
                or sameas(rows,"INCE") or sameas(rows,"INHA") or sameas(rows,"GDP"))) = 0;

   p_growthRateMarketModelPos(RMSSUP,ROWS,GPos) $ (     (abs(DATA(RMSSUP,GPos,ROWS,"Bas")) gt 1.E-05)
                                                    AND (abs(DATA(RMSSUP,GPos,ROWS,"Y"))   gt 1.E-05)
                                                    and (CALYEA("Y") NE CALYEA("BAS")))
     = (DATA(RMSSUP,GPos,ROWS,"Y")/DATA(RMSSUP,GPos,ROWS,"Bas"))**(1./(CALYEA("Y")-CALYEA("BAS")));

   p_growthRateMarketModelPos(RMSSUP,ROWS,GPos) $  ( (abs(DATA(RMSSUP,GPos,ROWS,"y")) le 1.E-05)
                                                      and DATA(RMSSUP,GPos,ROWS,"y"))
     = 1.E-7;



   p_growthRateMarketModelPos(RMS,"SFIS","PROD") = 1.0001;
   p_growthRateMarketModelPos(RMS,"FFIS","PROD") = 1.005;
   p_growthRateMarketModelPos(RMS,"OAQU","PROD") = 1.0001;

   p_growthRateMarketModelPos(RMS,"SFIS","FEDM") = 1.0001;
   p_growthRateMarketModelPos(RMS,"FFIS","FEDM") = 1.0001;
   p_growthRateMarketModelPos(RMS,"OAQU","FEDM") = 1.0001;

   p_growthRateMarketModelPos("CHN","FFIS","PROD") = 1.03;
   p_growthRateMarketModelPos("CHN","OAQU","PROD") = 1.02;
*
*
*  -- Some adhocery for KWS and other users prefering some economic logic in the baseline:
*     Due to PRIMES bioethanol forecasts, we are projecting a marked increase in production of RYEM+BARL in PL.
*     This is clearly visible in the EU10 aggregate but is not reflected in price changes where we have:
*     Grate(WHEA)>Grate(BARL)>Grate(RYEM)>Grate(MAIZ). In line with production growth, we lift BARL+RYEM a bit:

   p_growthRateMarketModelPos("EU010000","BARL","PMRK")
   $ ((p_growthRateMarketModelPos("PL000000","BARL","PROD")-p_growthRateMarketModelPos("PL000000","WHEA","PROD")) GT .015)
     = p_growthRateMarketModelPos("EU010000","WHEA","PMRK") + .001;
   p_growthRateMarketModelPos("EU010000","RYEM","PMRK")
   $ ((p_growthRateMarketModelPos("PL000000","RYEM","PROD")-p_growthRateMarketModelPos("PL000000","WHEA","PROD")) GT .025)
     = p_growthRateMarketModelPos("EU010000","WHEA","PMRK") + .003;

*  --- convert human consumption to per capita development
*
   p_growthRateMarketModelPos(RMS,XX,"Hcon") $ (p_growthRateMarketModelPos(RMS,XX,"Hcon") gt 1.E-7)
           = p_growthRateMarketModelPos(RMS,XX,"Hcon") - (p_growthRateMarketModelPos(RMS,"Inha","LEVL")-1) $ p_growthRateMarketModelPos(RMS,"Inha","LEVL");
*


$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_gRateDataPrep 17gratebal p_growthRateMarketModelPos




* ### block growth rates, annual rates
*
*
*  ---- if ever possible, use quantity and price developments from AGLINK (mapping to positions could be clearly
*       improved, but we are still in test phase)
*

   set runr_rmall(rmall);
   option kill=runr_rmall;
   runr_rmall(RMALL)    = YES;
   runr_rmall(RMSSUP)   = NO;
   runr_rmall("CH")     = NO;
   runr_rmall(EU27aggs) = NO;


*
*  --- growth rates in p_dataMarket before inserting Aglink
*
$ifi %source_report% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataMarketPrep before_aglink p_dataMarket

*
*  -- convert the change factor (simulation year relative to base year) into annual growth rate -- Aglink
*
   SET aglinkGratePos(COLS) / MAPR,FEDM,HCOM,INDM,PRCM,PPRI,LEVL ,PMRK/;


   p_dataMarket(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%") $ (  p_dataMarket(RMALL,aglinkGratePos,XX,"GrateAglink2020")
                                                                $ (CALYEA("Y") LE CALYEA("2020")))
      = p_dataMarket(RMALL,aglinkGratePos,XX,"GrateAglink2020")**(1./(CALYEA("2020")-CALYEA("BAS")));

*
*  --- growth rates in p_dataMarket after inserting Aglink
*
$ifi %source_report% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataMarketPrep after_aglink p_dataMarket


   p_dataMarket(RMALL,aglinkGratePos,XX,"GrateFapri%SIMY%") $ (p_dataMarket(RMALL,aglinkGratePos,XX,"Y")
        and p_fapriData(RMALL,aglinkGratePos,XX,"Y") and p_fapriData(RMALL,aglinkGratePos,XX,"BAS"))
      = (p_fapriData(RMALL,aglinkGratePos,XX,"Y")-p_fapriData(RMALL,aglinkGratePos,XX,"BAS"))**(1./(CALYEA("Y")-CALYEA("BAS")));

*
*  -- if AGLINK growth rate is missing, use FAPRI
*
   p_dataMarket(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%") $ (not p_dataMarket(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%"))
     = p_dataMarket(RMALL,aglinkGratePos,XX,"GrateFapri%SIMY%");

*
*  --- growth rates in p_dataMarket after inserting FAPRI for the missing values
*
$ifi %source_report% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataMarketPrep after_fapri p_dataMarket




*mih unload here for debugging 'before'
*    after this point we apply some security bounds that might change the picture...
*$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_gRateDataPrep grateannual before p_growthRateMarketModelPos

*
*  -- some security bounds to avoid crazy developments
*
   p_dataMarket(RMALL,agLinkGratePos,XX,"GrateAglink%SIMY%") $ (p_dataMarket(RMALL,agLinkGratePos,XX,"GrateAglink%SIMY%")
       and (p_dataMarket(RMALL,agLinkGratePos,XX,"GrateAglink%SIMY%") gt 1.1)) = 1.09;

   p_dataMarket(RMALL,agLinkGratePos,XX,"GrateAglink%SIMY%") $ (p_dataMarket(RMALL,agLinkGratePos,XX,"GrateAglink%SIMY%")
       and (p_dataMarket(RMALL,agLinkGratePos,XX,"GrateAglink%SIMY%") lt 0.9)) = 0.91;

   p_dataMarket(RMALL,"PPRI",XX,"GrateAglink%SIMY%") $ (p_dataMarket(RMALL,"PPRI",XX,"GrateAglink%SIMY%")
       and (p_dataMarket(RMALL,"PPRI",XX,"GrateAglink%SIMY%") gt 1.05)) = 1.03;

   p_dataMarket(RMALL,"PPRI",XX,"GrateAglink%SIMY%") $ (p_dataMarket(RMALL,"PPRI",XX,"GrateAglink%SIMY%")
       and (p_dataMarket(RMALL,"PPRI",XX,"GrateAglink%SIMY%") lt 0.95)) = 0.98;

   p_dataMarket(RMALL,"PMRK",XX,"GrateAglink%SIMY%") $ (p_dataMarket(RMALL,"PMRK",XX,"GrateAglink%SIMY%")
       and (p_dataMarket(RMALL,"PMRK",XX,"GrateAglink%SIMY%") gt 1.05)) = 1.03;

   p_dataMarket(RMALL,"PMRK",XX,"GrateAglink%SIMY%") $ (p_dataMarket(RMALL,"PMRK",XX,"GrateAglink%SIMY%")
       and (p_dataMarket(RMALL,"PMRK",XX,"GrateAglink%SIMY%") lt 0.95)) = 0.98;


*
*  --- growth rates in p_dataMarket after various security bounds
*
$ifi %source_report% == ON $batinclude 'arm\debug_dataPrep.gms' p_traceDataMarketPrep after_security p_dataMarket


* --- copy the calculated annual growth rates from p_dataMarket to p_growthRateMarketModelPos

   p_growthRateMarketModelPos(runr_rmall,XX,"PROD") $ p_DataMarket(runr_rmall,"MAPR",XX,"GrateAglink%SIMY%")
     = p_DataMarket(runr_rmall,"MAPR",XX,"GrateAglink%SIMY%");

   p_growthRateMarketModelPos(runr_rmall,XX,"LEVL") $ p_DataMarket(runr_rmall,"LEVL",XX,"GrateAglink%SIMY%")
     = p_DataMarket(runr_rmall,"LEVL",XX,"GrateAglink%SIMY%");

   p_growthRateMarketModelPos(runr_rmall,XX,"YILD") $
      (p_growthRateMarketModelPos(runr_rmall,XX,"PROD") and p_growthRateMarketModelPos(runr_rmall,XX,"LEVL"))
        = 1. + p_growthRateMarketModelPos(runr_rmall,XX,"PROD") - p_growthRateMarketModelPos(runr_rmall,XX,"LEVL");

   p_growthRateMarketModelPos(runr_rmall,XX,"FEED") $ p_DataMarket(runr_rmall,"FEDM",XX,"GrateAglink%SIMY%")
     = p_DataMarket(runr_rmall,"FEDM",XX,"GrateAglink%SIMY%");

   p_growthRateMarketModelPos(runr_rmall,XX,"HCON") $ p_DataMarket(runr_rmall,"HCOM",XX,"GrateAglink%SIMY%")
     = p_DataMarket(runr_rmall,"HCOM",XX,"GrateAglink%SIMY%");

   p_growthRateMarketModelPos(runr_rmall,XX,"PROC") $ p_DataMarket(runr_rmall,"INDM",XX,"GrateAglink%SIMY%")
     = p_DataMarket(runr_rmall,"INDM",XX,"GrateAglink%SIMY%");

   p_growthRateMarketModelPos(runr_rmall,XX,"PROC") $ p_DataMarket(runr_rmall,"PRCM",XX,"GrateAglink%SIMY%")
     = p_DataMarket(runr_rmall,"PRCM",XX,"GrateAglink%SIMY%");

   p_growthRateMarketModelPos(runr_rmall,XX,"PPRI") $ p_DataMarket(runr_rmall,"PPRI",XX,"GrateAglink%SIMY%")
     = p_DataMarket(runr_rmall,"PPRI",XX,"GrateAglink%SIMY%");

   p_growthRateMarketModelPos(runr_rmall,XX,"PMRK") $ p_DataMarket(runr_rmall,"PMRK",XX,"GrateAglink%SIMY%")
     = p_DataMarket(runr_rmall,"PMRK",XX,"GrateAglink%SIMY%");

* use producer prices if only that is available...
   p_growthRateMarketModelPos(runr_rmall,XX,"PMRK") $ ( (not p_DataMarket(runr_rmall,"PMRK",XX,"GrateAglink%SIMY%"))
                                                         and p_DataMarket(runr_rmall,"PPRI",XX,"GrateAglink%SIMY%"))
     = p_DataMarket(runr_rmall,"PPRI",XX,"GrateAglink%SIMY%");

$onlisting

*
$eval    gt2030 %SIMY% > 2030
$iftheni %gt2030% == 1
*
* --- WB, 17.01.13: Security bound for long-term: prices should not grow by less than 75% of inflation rate
*                   Otherwise, as we shift input costs with the inflation rate, the gross margins can
*                   shrink dramatically
*

   p_growthRateMarketModelPos(rmAll,XX,"PMRK") $ p_growthRateMarketModelPos(rmAll,XX,"PMRK")
     = MAX(1+0.75*(p_infl-1),p_growthRateMarketModelPos(rmAll,XX,"PMRK"));

   p_growthRateMarketModelPos(rmAll,XX,"PPRI") $ p_growthRateMarketModelPos(rmAll,XX,"PPRI")
     = MAX(1+0.75*(p_infl-1),p_growthRateMarketModelPos(rmAll,XX,"PPRI"));

*
*  ---- not more than 3% increase per annum (= that is almost factor 4 from 2004 to 2050)
*       for human consumotion, and 4% for feed and processing
*
   p_growthRateMarketModelPos(rmAll,XX,"HCON")
    = MIN(1.03,p_growthRateMarketModelPos(rmAll,XX,"HCON"));

   p_growthRateMarketModelPos(rmAll,XX,"FEED")
    = MIN(1.04,p_growthRateMarketModelPos(rmAll,XX,"FEED"));

   p_growthRateMarketModelPos(rmAll,XX,"PROC")
    = MIN(1.04,p_growthRateMarketModelPos(rmAll,XX,"PROC"));


$endif


RMT(RMT) = NO;
RMT(RM) = YES;
RMT(RMS) = YES;
RMT(RMSsup) = NO;
RMT(EU27Aggs) = NO;
RMT("CH") = NO;

execute_unload "before.gdx";
**** Give new aglink trends priotity - consistency checks already in global.gms

   p_growthRateMarketModelPos(RMT,XX,Cols) $ ( (p_mediumTermData(RMT,cols,XX,"%SIMY%","GrowthFac") gt 0)
                                                                $ (CALYEA("Y") LE CALYEA("2030")))
      = p_mediumTermData(RMT,cols,XX,"%SIMY%","GrowthFac")**(1./(CALYEA("Y")-CALYEA("BAS")));

**** Introduce growth rates for trade flows from last faostat to 2000


   p_growthRateMarketModelPos(RM,XX,RM1) $ (p_tradeFlows(RM,RM1,XX,"2003") + p_tradeFlows(RM,RM1,XX,"2004") + p_tradeFlows(RM,RM1,XX,"2005"))

   = MIN(MAX(0.99,((p_tradeFlows(RM,RM1,XX,"2007") + p_tradeFlows(RM,RM1,XX,"2008") + p_tradeFlows(RM,RM1,XX,"2009"))
    / (p_tradeFlows(RM,RM1,XX,"2003") + p_tradeFlows(RM,RM1,XX,"2004") + p_tradeFlows(RM,RM1,XX,"2005")))),1.01) **(1./(2008-2004));


p_tradeFlows(RM,RM1,rows,SIMYY)=0;
execute_unload "after.gdx";
$offlisting



$batinclude "util\debug_stepbystep.gms" endDataPrep Data
$batinclude "util\debug_stepbystep.gms" Final Data



$ifi %DEBUG_MARKET% == ON $batinclude 'arm\debug_dataPrep.gms' p_gRateDataPrep 18grateannual p_growthRateMarketModelPos

*$ontext

* --- Switch that on to let report market imbalances at global level

   set aggregToWorld(COLS) / PROD, HCON, PROC, FEED, BIOF, IMPT, EXPT /;


   parameter p_resWorld(XX,*) "Check errors in world market balance";
   p_resWorld(XX,aggregToWorld) = sum(RMS, DATA(RMS,aggregToWorld,XX,"BAS"));
   p_resWorld(XX,"EXPORTS") = sum(RM, DATA(RM,"EXPT",XX,"BAS") + DATA(RM,"EXPORTS",XX,"BAS") $ (NOT DATA(RM,"EXPT",XX,"BAS")));
   p_resWorld(XX,"IMPORTS") = sum(RM, DATA(RM,"IMPT",XX,"BAS") + DATA(RM,"IMPORTS",XX,"BAS") $ (NOT DATA(RM,"IMPT",XX,"BAS")));

   p_resWorld(XX,"DEMD") =
                              p_resWorld(XX,"HCON")
                             +p_resWorld(XX,"PROC")
                             +p_resWorld(XX,"FEED")
                             +p_resWorld(XX,"BIOF");

   p_resWorld(XX,"BalDiff") = p_resWorld(XX,"PROD")
                             -p_resWorld(XX,"DEMD");

   p_resWorld(XX,"BalDiffR") = 2*p_resWorld(XX,"BALDIFF")
                              /(p_resWorld(XX,"HCON")+p_resWorld(XX,"PROD"));

   p_resWorld(XX,"TrdDiff") = p_resWorld(XX,"IMPT")
                             -p_resWorld(XX,"EXPT");

   p_resWorld(XX,"TrdDiffR") = p_resWorld(XX,"TrdDiff")*2
                              /(  p_resWorld(XX,"IMPT")
                                + p_resWorld(XX,"EXPT"));


   p_resWorld(XX,"Tradabilat")= (SUM((RM,RM1) $ (NOT SAMEAS(RM,RM1) and (not sameas (RM,"CH")) and (not sameas (RM1,"CH"))),p_tradeFlows(RM,RM1,XX,"BAS")));
*$STOP
    display p_resWorld;
*  abort p_growthRateMarketModelPos;
*  abort p_resWorld;
*$offtext
$offlisting

$iftheni.finalvalues %DEBUG_MARKET% == ON
*
* --- saving the final values of the debugged parameters into the reporting parameters
*

  p_traceDataPrep(RALL,COLS,ROWS,SIMYY_YBAS,"19final") $ DATA(RALL,COLS,ROWS,SIMYY_YBAS) = DATA(RALL,COLS,ROWS,SIMYY_YBAS);
  p_traceTradeflowsPrep(RMALL,RMALL1,ROWS,SIMYY_YBAS,"19final") $ p_tradeFlows(RMALL,RMALL1,ROWS,SIMYY_YBAS) = p_tradeFlows(RMALL,RMALL1,ROWS,SIMYY_YBAS);
  p_traceDataMarketPrep(RMALL,COLS,ROWS,SIMYY_YBAS,"19final") $ p_dataMarket(RMALL,COLS,ROWS,SIMYY_YBAS) = p_dataMarket(RMALL,COLS,ROWS,SIMYY_YBAS);

  p_traceFapriDataPrep(RMALL,COLS,ROWS,SIMYY_YBAS,"19final") $ p_fapriData(RMALL,COLS,ROWS,SIMYY_YBAS) = p_fapriData(RMALL,COLS,ROWS,SIMYY_YBAS);
  p_traceBioDataPrep(RALL,COLS,ROWS,SIMYY_YBAS,"19final") $ p_bioDat(RALL,COLS,ROWS,SIMYY_YBAS) = p_bioDat(RALL,COLS,ROWS,SIMYY_YBAS);
  p_gRateDataPrep(RALL,rows,cols,"19final") $ p_growthRateMarketModelPos(RALL,rows,cols) = p_growthRateMarketModelPos(RALL,rows,cols);

$endif.finalvalues



$iftheni.sourcereport %source_report% == ON
*
*   --- report on the shares of information sources used in data_prep
*
parameter report_dataMarket;

report_dataMarket(RMALL,cols,"from_global")
 = sum( rows $  (p_traceDataMarketPrep(RMALL,cols,rows,"GrateAglink%SIMY%","before_aglink")
                 $ ((p_traceDataMarketPrep(RMALL,cols,rows,"GrateAglink%SIMY%","before_aglink") eq p_traceDataMarketPrep(RMALL,cols,rows,"GrateAglink%SIMY%","after_security"))
                   or (not p_traceDataMarketPrep(RMALL,cols,rows,"GrateAglink%SIMY%","after_security")))),  1);

report_dataMarket(RMALL,aglinkGratePos,"aglink")
 = sum( XX $ ( p_traceDataMarketPrep(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%","after_security")
              $ (p_traceDataMarketPrep(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%","after_security") eq p_traceDataMarketPrep(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%","after_aglink"))), 1);

report_dataMarket(RMALL,aglinkGratePos,"fapri")
 = sum( XX $ ( p_traceDataMarketPrep(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%","after_security")
           $ ( (p_traceDataMarketPrep(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%","after_security") eq p_traceDataMarketPrep(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%","after_fapri"))
                 and (p_traceDataMarketPrep(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%","after_aglink") ne p_traceDataMarketPrep(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%","after_fapri")))), 1);


report_dataMarket(RMALL,aglinkGratePos,"security_device")
 = sum( XX $ ( p_traceDataMarketPrep(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%","after_security")
           $ (p_traceDataMarketPrep(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%","after_security") ne p_traceDataMarketPrep(RMALL,aglinkGratePos,XX,"GrateAglink%SIMY%","after_fapri"))), 1);


report_dataMarket(RMALL,cols,"total")
 = sum( rows $ (p_traceDataMarketPrep(RMALL,cols,rows,"GrateAglink%SIMY%","after_security")  or p_traceDataMarketPrep(RMALL,cols,rows,"GrateAglink%SIMY%","before_aglink")), 1);


execute_unload "%restart_out%\reportDataMarket.gdx", report_dataMarket;


parameter report_gRates;

report_gRates(RMALL,cols,"survive_from1stStep")
  = sum( rows $ ( p_gRateDataPrep(RMALL,ROWS,COLS,"1init")
                 $  (p_gRateDataPrep(RMALL,ROWS,COLS,"1init") eq p_growthRateMarketModelPos(rmall,rows,cols))), 1);


report_gRates(RMALL,cols,"survive_from_at2030")
  =
*   -- survivors from the state (after_at2030); note that it might contain values associated before => those need to be deducted
  sum( rows $ ( p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030")
                 $  (p_gRateDataPrep(RMALL,ROWS,COLS,"1init") eq p_growthRateMarketModelPos(rmall,rows,cols))), 1)

*   -- deduct values introduced before the at2030 projections
  - sum( rows $ ( p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030") $ p_gRateDataPrep(RMALL,ROWS,COLS,"16gratemacro")
                 $  (p_gRateDataPrep(RMALL,ROWS,COLS,"16gratemacro") eq p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030"))), 1)

  - sum( rows $ ( p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030") $ p_gRateDataPrep(RMALL,ROWS,COLS,"15gratefillup")
                 $  (p_gRateDataPrep(RMALL,ROWS,COLS,"15gratefillup") eq p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030"))), 1)

  - sum( rows $ ( p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030") $ p_gRateDataPrep(RMALL,ROWS,COLS,"14sugatrend")
                 $  (p_gRateDataPrep(RMALL,ROWS,COLS,"14sugatrend") eq p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030"))), 1)

  - sum( rows $ ( p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030") $ p_gRateDataPrep(RMALL,ROWS,COLS,"13grateaglink")
                 $  (p_gRateDataPrep(RMALL,ROWS,COLS,"13grateaglink") eq p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030"))), 1)

  - sum( rows $ ( p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030") $ p_gRateDataPrep(RMALL,ROWS,COLS,"1init")
                 $  (p_gRateDataPrep(RMALL,ROWS,COLS,"1init") eq p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030"))), 1);



report_gRates(RMALL,cols,"total") = sum( rows $ p_growthRateMarketModelPos(rmall,rows,cols), 1);


parameter report_gRates_at2030;

*
 report_gRates_at2030(RMALL,ROWS,COLS,"introduced_from_at2030") $ ( p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030")
                $ ( p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030") ne p_gRateDataPrep(RMALL,ROWS,COLS,"before_at2030")))
                = p_gRateDataPrep(RMALL,ROWS,COLS,"after_at2030");

 report_gRates_at2030(RMALL,ROWS,COLS,"kept_till_the_end") $ ( report_gRates_at2030(RMALL,ROWS,COLS,"introduced_from_at2030")
                $ ( report_gRates_at2030(RMALL,ROWS,COLS,"introduced_from_at2030") eq p_growthRateMarketModelPos(rmall,rows,cols)))
                = report_gRates_at2030(RMALL,ROWS,COLS,"introduced_from_at2030");

 report_gRates_at2030(RMALL,ROWS,COLS,"final_value") $  report_gRates_at2030(RMALL,ROWS,COLS,"introduced_from_at2030")
                = p_growthRateMarketModelPos(rmall,rows,cols);

execute_unload "%restart_out%\reportGrates.gdx", report_gRates, p_growthRateMarketModelPos, report_gRates_at2030, rmall, rms;
execute_unload "%restart_out%\reportAt2030.gdx", report_gRates_at2030;

$endif.sourcereport



 option p_growthRateMarketModelPos:5;
 option kill= p_dataMarket;
 option kill= p_dataCH;
 option kill= p_changesCH;
 option kill= p_fapriData;
 option kill= p_longRunInfo;
 option kill= s_to_read_Aglink;
 option kill= p_mediumTermData;

$ifi %DEBUG_MARKET% == ON execute_unload "%RESULTS_OUT%\baseline\trace_dataPrep.gdx", p_traceDataPrep, p_traceTradeflowsPrep, p_traceDataMarketPrep, p_traceFapriDataPrep, p_gRateDataPrep;


$iftheni.optionkill %DEBUG_MARKET% == ON
*
* --- option kills for dataPrep debugging parameters!
*
     option kill= p_traceDataPrep;
     option kill= p_traceTradeflowsPrep;
     option kill= p_traceDataMarketPrep;
     option kill= p_traceFapriDataPrep;
     option kill= p_traceBioDataPrep;
     option kill= p_gRateDataPrep;


$endif.optionkill


